apiVersion: v1
kind: ConfigMap
metadata:
  name: webconfigmap
#   namespace: bi
data:
  webserver_config.py: |

    import os
    import logging
    import jwt
    import requests
    from base64 import b64decode
    from cryptography.hazmat.primitives import serialization
    from airflow.www.security import AirflowSecurityManager
    from flask_appbuilder import expose
    from flask_appbuilder.security.manager import AUTH_OAUTH
    from flask_appbuilder.security.views import AuthOAuthView
    from flask import redirect, request
    
    basedir = os.path.abspath(os.path.dirname(__file__))
    log = logging.getLogger(__name__)
    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True
    # ----------------------------------------------------
    # AUTHENTICATION CONFIG
    # ----------------------------------------------------
    # For details on how to set up each of the following authentication, see
    # http://flask-appbuilder.readthedocs.io/en/latest/security.html# authentication-methods
    # for details.
    AUTH_TYPE = AUTH_OAUTH
    AUTH_USER_REGISTRATION = True
    AUTH_DEFAULT_ROLE = 'Public'
    AUTH_ROLES_SYNC_AT_LOGIN = True
    AUTH_USER_REGISTRATION_ROLE = 'Public'
    AUTH_ROLES_MAPPING = {
      "airflow_admin": ["Admin"],
      "airflow_op": ["Op"],
      "airflow_user": ["User"],
      "airflow_viewer": ["Viewer"],
      "airflow_public": ["Public"],
    }
    PROVIDER_NAME = 'keycloak'
    CLIENT_ID = os.getenv("AIRFLOW_CLIENT_ID")

    CLIENT_SECRET = os.getenv("AIRFLOW_CLIENT_SECRET")

    OIDC_ISSUER = os.getenv("DISCOVERY_URL")
    OIDC_METADATA_URL = f"{OIDC_ISSUER}/.well-known/openid-configuration"
    OIDC_BASE_URL = "{oidc_issuer}/protocol/openid-connect".format(oidc_issuer=OIDC_ISSUER)
    OIDC_TOKEN_URL = "{oidc_base_url}/token".format(oidc_base_url=OIDC_BASE_URL)
    OIDC_AUTH_URL = "{oidc_base_url}/auth".format(oidc_base_url=OIDC_BASE_URL)
    # When using OAuth Auth, uncomment to setup provider(s) info
    OAUTH_PROVIDERS = [{
        'name':PROVIDER_NAME,
        'token_key':'access_token',
        'icon':'fa-google',
        'remote_app': {
            'api_base_url':OIDC_BASE_URL,
            'access_token_url':OIDC_TOKEN_URL,
            'authorize_url':OIDC_AUTH_URL,
            "server_metadata_url": OIDC_METADATA_URL,
            'request_token_url': None,
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET,
            'client_kwargs':{
                'scope': 'email profile'
            }
           
        }
    }]
    try:
        response = requests.get(OIDC_ISSUER)
        response.raise_for_status()
        key_der_base64 = response.json().get("public_key")
        key_der = b64decode(key_der_base64.encode())
        public_key = serialization.load_der_public_key(key_der)
    except requests.RequestException as e:
        log.error(f"Failed to fetch Keycloak public key: {e}")
        raise

    class CustomAuthRemoteUserView(AuthOAuthView):
        @expose("/logout/")
        def logout(self):
            """Delete access token before logging out."""
            super().logout()
            redirect_url = request.url_root.strip("/") + self.appbuilder.get_url_for_login
            return redirect(f"{OIDC_BASE_URL}/logout?redirect_uri={redirect_url}")
      
    class CustomSecurityManager(AirflowSecurityManager):
        authoauthview = CustomAuthRemoteUserView

        def oauth_user_info(self, provider, response):
            if provider == PROVIDER_NAME:
                token = response["access_token"]
                if not token:
                    log.warning("No access token found in the response.")
                    return {}
                try:
                    user_info = jwt.decode(token, public_key, algorithms=['HS256', 'RS256'], audience=CLIENT_ID)
                except jwt.ExpiredSignatureError:
                    log.error("Token has expired.")
                    return {}
                except jwt.InvalidTokenError as e:
                    log.error(f"Invalid token: {e}")
                    return {}

                roles = (
                    user_info.get("resource_access", {})
                    .get(KEYCLOAK_CLIENT_ID, {})
                    .get("roles", [AUTH_DEFAULT_ROLE])
                )
                userdetails = {
                    "username": user_info.get("preferred_username"),
                    "email": user_info.get("email"),
                    "first_name": user_info.get("given_name"),
                    "last_name": user_info.get("family_name"),
                    "role_keys": roles,
                }
                log.info("user info: {0}".format(userdetails))
                return userdetails
            else:
                return {}
        
    SECURITY_MANAGER_CLASS = CustomSecurityManager
