{
  "FolderID": "",
  "FolderName": "",
  "OwnerUserID": "197064206853",
  "OwnerUserName": "BASILOGBONNA",
  "Version": 3,
  "URL": "/west-europe.azure/oaf/w6FixtZX6sL#query",
  "WorksheetID": "6FixtZX6sL",
  "WorksheetName": "ODOO SALES PIPELINE",
  "StartedUtc": "2023-02-09T10:38:08.7455399Z",
  "EndedUtc": "2023-02-09T10:38:09.2154787Z",
  "ModifiedUtc": "2023-02-16T14:33:57.000983Z",
  "Role": "DATAENGINEER",
  "Warehouse": "COMPUTE_WH",
  "Database": "DEVELOPMENT",
  "Schema": "PUBLIC",
  "Query": "/* \n This worksheet contains the overall workflow for building the odoo pipelines in 10 steps\n  1.Create Staging Tables\n  2.Create Development tables\n  3.Create function for use in stored procedure\n  4.Create Stored Procedures for copying data from landing through staging into development.\n  5.CREATE PRODUCTION TABLES\n  6.CREATE VIEWS FOR DEVELOPMENT FOR (QA)\n  7.CREATE PROCEDURES FOR MERGING DATA FROM DEVELOPMENT INTO PRODUCTION\n  8.Create Production data quality checks\n  9.Create Test for false positive in quality check\n  10. Create and start tasks dags.\n*/\n\n--- 1. Create Staging Tables ---\n\nCREATE OR REPLACE TABLE STAGING.ODOO.SALES (\n\tID NUMBER(38,0) COMMENT 'dwh id for sale',\n    POS_ORDER_LINE_ID NUMBER(10,0) NOT NULL COMMENT 'id for the single product sold at any shop at any time from pos_order_line.id',\n\tPRODUCT_ID NUMBER(38,0) NOT NULL COMMENT 'product_template.id',\n\tPRODUCT_NAME VARCHAR(100) NOT NULL COMMENT 'product_template.name',\n\tPRODUCT_CATEGORY_ID NUMBER(10,0) COMMENT 'product_category.id with foreign key to product_template.categ_id',\n\tPRODUCT_CATEGORY VARCHAR(100) COMMENT 'product_category.name',\n\tPRODUCT_CODE VARCHAR(50) COMMENT 'product_template.default_code',\n\tPRICE FLOAT COMMENT 'price from general (product_template.listprice) or country specific price list (product_pricelist_item.fixed_price)',\n    PRICE_LIST_ID NUMBER(38, 0) COMMENT 'product.pricelist_item.pricelist_id or 1 (default public price list)', \n\tPRICE_LIST VARCHAR(100) COMMENT 'price list use to get the price. Could be the default price list which matches product_template.list_price or country specific price (product_pricelist.name)',\n\tQUANTITY FLOAT NOT NULL COMMENT 'Pos_Order_line.qty',\n\tMARGIN NUMBER(38,0) COMMENT 'calculated difference between average sale price - average purchase price',\n\tCOMPANY_ID NUMBER(38,0) NOT NULL COMMENT 'pos_order_line.company_id',\n\tCOUNTRY VARCHAR(50) NOT NULL COMMENT 'res_company.name given pos_order_line.company_id',\n\tDUKA_NAME VARCHAR(100) COMMENT 'res_shop.name given pos_order.id',\n\tSHOP_KEEPER VARCHAR(50) COMMENT 'name of shopowner gotten from res_users.login given pos_order_line.user_id',\n    CUSTOMER_ID NUMBER(38,0) COMMENT 'ID of the customer purchasing the product',\n\tCREATED_AT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'pos_order_line.create_date',\n\tCREATED_BY VARCHAR(50) NOT NULL COMMENT 'name of user who inputted the sale, gotten from res_users.login given the pos_order_line.create_uid',\n\tDB_CREATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp() COMMENT 'date and time sales data is inputted into the dwh',\n\tDB_UPDATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp() COMMENT 'date and time sales data is updated into the dwh',\n\tSOURCE VARCHAR(10) NOT NULL DEFAULT 'Odoo'\n);\n\nCREATE OR REPLACE TABLE STAGING.ODOO.CUSTOMERS (\n ID integer comment 'dwh id for customer',\n user_id number (5) not null comment 'res_partners.id',\n phone_number varchar(50) comment 'res_partners.phone_sanitized',\n name varchar(100) not null comment 'res_partners.name',\n company_id number(4)  comment 'res_partners.company_id or fill from res_partners.country_id',\n country varchar(100) comment 'res_company.name',\n created_at datetime not null comment 'res_partners.create_date',\n created_by varchar(50) not null comment 'name of admin who created user res_users.login',\n db_created_at  TIMESTAMP_NTZ(9) DEFAULT current_timestamp() comment 'date and time sales data is inputted into the dwh',\n db_updated_at TIMESTAMP_NTZ(9) DEFAULT current_timestamp() comment 'date and time sales data is updated into the dwh',\n source varchar(10) not null default 'Odoo'\n);\n\ncreate or replace TABLE STAGING.ODOO.INVENTORY (\n\tID NUMBER(38,0) COMMENT 'dwh id for inventory record',\n    STOCK_QUANT_ID NUMBER(8,0)  NOT NULL COMMENT 'stock_quant.id',\n\tLOCATION_ID NUMBER(8,0) COMMENT 'stock_quant.location_id',\n\tLOCATION_NAME VARCHAR(100)  COMMENT 'stock_location.name given stock_quant.location_id',\n\tPRODUCT_ID NUMBER(8,0) NOT NULL COMMENT 'stock_quant.product_id',\n\tPRODUCT_NAME VARCHAR(100) NOT NULL COMMENT 'product_template.name given stock_quant.product_id',\n\tQUANTITY NUMBER(8,0) NOT NULL COMMENT 'stock_quant.quantity',\n\tAVAILABLE_QUANTITY NUMBER(8,0) COMMENT 'quantity available in odoo',\n\tVALUE NUMBER(20,0),\n\tCOMPANY_ID NUMBER(4,0) NOT NULL COMMENT 'stock_quant.company_id',\n\tCOUNTRY VARCHAR(100) NOT NULL COMMENT 'res_company.name',\n\tCREATED_AT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'res_partners.create_date',\n\tCREATED_BY VARCHAR(50) NOT NULL COMMENT 'name of admin who created user res_users.login',\n\tDB_CREATED_AT TIMESTAMP_NTZ(9)  DEFAULT current_timestamp() COMMENT 'date and time sales data is inputted into the dwh',\n\tDB_UPDATED_AT TIMESTAMP_NTZ(9)  DEFAULT current_timestamp() COMMENT 'date and time sales data is updated into the dwh',\n\tSOURCE VARCHAR(10) NOT NULL DEFAULT 'Odoo'\n);\n\n-- 2. Create Development tables ---\n\nCREATE OR REPLACE TABLE DEVELOPMENT.SALES.ODOO_SALES (\n\tID NUMBER(38,0) autoincrement (1,1) COMMENT 'dwh id for sale',\n    POS_ORDER_LINE_ID NUMBER(38,0) NOT NULL COMMENT 'id for the single product sold at any shop at any time from pos_order_line.id',\n\tPRODUCT_ID NUMBER(38,0) NOT NULL COMMENT 'product_template.id',\n\tPRODUCT_NAME VARCHAR(100) NOT NULL COMMENT 'product_template.name',\n\tPRODUCT_CATEGORY_ID NUMBER(38,0) COMMENT 'product_category.id with foreign key to product_template.categ_id',\n\tPRODUCT_CATEGORY VARCHAR(100) COMMENT 'product_category.name',\n\tPRODUCT_CODE VARCHAR(50)  COMMENT 'product_template.default_code',\n\tPRICE FLOAT COMMENT 'price from general (product_template.listprice) or country specific price list (product_pricelist_item.fixed_price)',\n    PRICE_LIST_ID NUMBER(8, 0) COMMENT 'product.pricelist_item.pricelist_id or 1 (default public price list)', \n\tPRICE_LIST VARCHAR(100) COMMENT 'price list use to get the price. Could be the default price list which matches product_template.list_price or country specific price (product_pricelist.name)',\n\tQUANTITY FLOAT NOT NULL COMMENT 'Pos_Order_line.qty',\n\tMARGIN NUMBER(38,0) COMMENT 'calculated difference between average sale price - average purchase price',\n\tCOMPANY_ID NUMBER(38,0) NOT NULL COMMENT 'pos_order_line.company_id',\n    CUSTOMER_ID NUMBER(38,0) COMMENT 'ID of the customer purchasing the product',\n\tCOUNTRY VARCHAR(50) NOT NULL COMMENT 'res_company.name given pos_order_line.company_id',\n\tDUKA_NAME VARCHAR(100) COMMENT 'res_shop.name given pos_order.id',\n\tSHOP_KEEPER VARCHAR(50) COMMENT 'name of shopowner gotten from res_users.login given pos_order_line.user_id',\n\tCREATED_AT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'pos_order_line.create_date',\n\tCREATED_BY VARCHAR(50) NOT NULL COMMENT 'name of user who inputted the sale, gotten from res_users.login given the pos_order_line.create_uid',\n    IS_DELETED BOOLEAN DEFAULT false COMMENT 'data previously existed but no longer in staging',\n\tDB_CREATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp() COMMENT 'date and time sales data is inputted into the dwh',\n\tDB_UPDATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp() COMMENT 'date and time sales data is updated into the dwh',\n\tSOURCE VARCHAR(10) NOT NULL DEFAULT 'Odoo'\n);\n\n\nCREATE OR REPLACE TABLE DEVELOPMENT.CLIENT.ODOO_CUSTOMERS (\n ID NUMBER(38,0) autoincrement (1,1) comment 'dwh id for customer',\n user_id number (5) not null comment 'res_partners.id',\n name varchar(100) not null comment 'res_partners.name',\n phone_number varchar(50) comment 'res_partners.phone_sanitized',\n company_id number(4)  comment 'res_partners.company_id or fill from res_partners.country_id',\n country varchar(100) comment 'res_company.name',\n created_at datetime not null comment 'res_partners.create_date',\n created_by varchar(50) not null comment 'name of admin who created user res_users.login',\n IS_DELETED BOOLEAN DEFAULT false COMMENT 'data previously existed but no longer in staging',\n db_created_at  TIMESTAMP_NTZ(9) DEFAULT current_timestamp() comment 'date and time sales data is inputted into the dwh',\n db_updated_at TIMESTAMP_NTZ(9) DEFAULT current_timestamp() comment 'date and time sales data is updated into the dwh',\n source varchar(10) not null default 'Odoo'\n);\n\ncreate or replace TABLE DEVELOPMENT.LOGISTICS.ODOO_INVENTORY (\n\tID NUMBER(38,0) autoincrement(1,1) NOT NULL COMMENT 'dwh id for inventory record',\n    STOCK_QUANT_ID NUMBER(8,0) NOT NULL COMMENT 'stock_quant.id',\n\tLOCATION_ID NUMBER(8,0) NOT NULL  COMMENT 'stock_quant.location_id',\n\tLOCATION_NAME VARCHAR(100) NOT NULL  COMMENT 'stock_location.name given stock_quant.location_id',\n\tPRODUCT_ID NUMBER(8,0) NOT NULL COMMENT 'stock_quant.product_id',\n\tPRODUCT_NAME VARCHAR(100) NOT NULL COMMENT 'product_template.name given stock_quant.product_id',\n\tQUANTITY NUMBER(8,0) NOT NULL COMMENT 'stock_quant.quantity',\n\tAVAILABLE_QUANTITY NUMBER(8,0) COMMENT 'quantity available in odoo',\n\tVALUE NUMBER(20,0),\n\tCOMPANY_ID NUMBER(4,0) NOT NULL COMMENT 'stock_quant.company_id',\n\tCOUNTRY VARCHAR(100) NOT NULL COMMENT 'res_company.name',\n\tCREATED_AT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'res_partners.create_date',\n\tCREATED_BY VARCHAR(50) NOT NULL COMMENT 'name of admin who created user res_users.login',\n    IS_DELETED BOOLEAN DEFAULT false COMMENT 'data previously existed but no longer in staging',\n\tDB_CREATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp()  COMMENT 'date and time sales data is inputted into the dwh',\n\tDB_UPDATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp()  COMMENT 'date and time sales data is updated into the dwh',\n\tSOURCE VARCHAR(10) NOT NULL DEFAULT 'Odoo'\n);\n\n-- 3. Create function for use in stored procedure ---\n\nCREATE OR REPLACE FUNCTION STAGING.ODOO.GET_NAME(EMAIL VARCHAR)\nRETURNS VARCHAR NOT NULL\nCOMMENT = 'SPLITS NAME FROM ONE ACRE FUND EMAIL AND GETS THE USER NAME'\nAS 'REPLACE(SPLIT_PART(EMAIL,''@'',0),''.'','' '')';\n\n-- 4. Create Stored Procedures for copying data from landing through staging into development.\n\nCREATE OR REPLACE PROCEDURE DEVELOPMENT.SALES.SP_INCREMENTLOAD_ODOO_SALES()\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS 'DECLARE PREVIOUS_COUNT INTEGER DEFAULT 0; RETURN_VAL VARCHAR;\nBEGIN\n    TRUNCATE TABLE STAGING.ODOO.SALES;\n    INSERT INTO STAGING.ODOO.SALES(\n        POS_ORDER_LINE_ID, PRODUCT_ID,PRODUCT_NAME, PRODUCT_CATEGORY_ID, PRODUCT_CATEGORY,PRICE,\n        PRODUCT_CODE,QUANTITY,COMPANY_ID, COUNTRY, CREATED_AT,CREATED_BY,DB_UPDATED_AT\n    )\n    SELECT \n        POL.ID, PT.ID, PT.NAME, PC.ID, PC.NAME, PT.LIST_PRICE, PT.DEFAULT_CODE, POL.QTY, \n        POL.COMPANY_ID, RCM.NAME, POL.CREATE_DATE, \n        STAGING.ODOO.GET_NAME(RU.LOGIN), current_timestamp()\n     FROM LANDING.ODOO.POS_ORDER_LINE POL\n     JOIN LANDING.ODOO.PRODUCT_TEMPLATE PT ON PT.ID = POL.PRODUCT_ID \n     JOIN LANDING.ODOO.PRODUCT_CATEGORY PC ON PC.ID = PT.CATEG_ID\n     JOIN LANDING.ODOO.RES_COMPANY RCM ON RCM.ID = POL.COMPANY_ID\n     JOIN LANDING.ODOO.RES_USERS RU ON RU.ID = POL.CREATE_UID ;\n\n    UPDATE STAGING.ODOO.SALES\n    SET \n        DUKA_NAME =  SHOP_INFO.DUKA_NAME,\n        SHOP_KEEPER = SHOP_INFO.SHOP_KEEPER,\n        CUSTOMER_ID = SHOP_INFO.PARTNER_ID\n    FROM (\n           SELECT POL.ID,RS.NAME AS DUKA_NAME, PO.PARTNER_ID, STAGING.ODOO.GET_NAME(RU.LOGIN) AS SHOP_KEEPER\n            FROM LANDING.ODOO.POS_ORDER_LINE POL\n            JOIN LANDING.ODOO.POS_ORDER PO ON PO.ID = POL.ORDER_ID\n            JOIN LANDING.ODOO.RES_SHOP RS ON PO.SHOP_ID = RS.ID\n            JOIN LANDING.ODOO.RES_USERS RU ON RU.ID = PO.USER_ID\n    )SHOP_INFO\n    WHERE SALES.POS_ORDER_LINE_ID = SHOP_INFO.ID;\n\n    UPDATE STAGING.ODOO.SALES \n    SET\n        PRICE = CASE \n            WHEN PRICE_INFO.COMPUTE_PRICE = ''percent'' THEN PRICE_INFO.PERCENT_PRICE\n            WHEN PRICE_INFO.COMPUTE_PRICE = ''fixed'' THEN PRICE_INFO.FIXED_PRICE\n            ELSE SALES.PRICE END,\n        PRICE_LIST_ID = CASE \n            WHEN PRICE_INFO.PRICELIST_ID IS NULL THEN 1   \n            ELSE PRICE_INFO.PRICELIST_ID END,\n        PRICE_LIST = CASE \n            WHEN PRICE_INFO.NAME IS NULL THEN ''Public Pricelist''\n            ELSE PRICE_INFO.NAME END\n    FROM(\n      SELECT PT.ID AS PRODUCT_ID,\n        PP.COMPANY_ID ,\n        PP.NAME,PPI.PRICELIST_ID, PPI.COMPUTE_PRICE, PPI.FIXED_PRICE, PPI.PERCENT_PRICE\n        FROM LANDING.ODOO.PRODUCT_PRICELIST_ITEM PPI\n        JOIN LANDING.ODOO.PRODUCT_PRICELIST PP ON PP.ID = PPI.PRICELIST_ID\n        RIGHT JOIN LANDING.ODOO.PRODUCT_TEMPLATE PT ON PPI.PRODUCT_TMPL_ID = PT.ID\n     ) PRICE_INFO\n\n    WHERE SALES.PRODUCT_ID = PRICE_INFO.PRODUCT_ID;\n\n    UPDATE STAGING.ODOO.SALES\n    SET \n        ID = DEV_INFO.ID,\n        DB_CREATED_AT = DEV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, DB_CREATED_AT, POS_ORDER_LINE_ID FROM SALES.ODOO_SALES\n    ) DEV_INFO\n    WHERE SALES.ID IS NULL AND SALES.POS_ORDER_LINE_ID = DEV_INFO.POS_ORDER_LINE_ID;\n\n    \n    MERGE INTO SALES.ODOO_SALES AS T USING STAGING.ODOO.SALES AS S\n    ON T.ID = S.ID\n    WHEN MATCHED \n    AND (\n        ZEROIFNULL(T.COMPANY_ID) != ZEROIFNULL(S.COMPANY_ID)\n     OR ZEROIFNULL(T.MARGIN) != ZEROIFNULL(S.MARGIN)\n     OR ZEROIFNULL(T.POS_ORDER_LINE_ID) != ZEROIFNULL(S.POS_ORDER_LINE_ID)\n     OR ZEROIFNULL(T.PRICE) != ZEROIFNULL(S.PRICE)\n     OR ZEROIFNULL(T.PRICE_LIST_ID) != ZEROIFNULL(S.PRICE_LIST_ID)\n     OR ZEROIFNULL(T.CUSTOMER_ID) != ZEROIFNULL(S.CUSTOMER_ID)\n     OR ZEROIFNULL(T.PRODUCT_CATEGORY_ID) != ZEROIFNULL(S.PRODUCT_CATEGORY_ID)\n     OR ZEROIFNULL(T.PRODUCT_ID) != ZEROIFNULL(S.PRODUCT_ID)\n     OR ZEROIFNULL(T.QUANTITY) != ZEROIFNULL(S.QUANTITY)\n     OR IFNULL(T.COUNTRY,'''''''') != IFNULL(S.COUNTRY,'''''''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.DUKA_NAME,'''''''') != IFNULL(S.DUKA_NAME,'''''''')\n     OR IFNULL(T.PRICE_LIST,'''''''') != IFNULL(S.PRICE_LIST,'''''''')\n     OR IFNULL(T.PRODUCT_CATEGORY,'''''''') != IFNULL(S.PRODUCT_CATEGORY,'''''''')\n     OR IFNULL(T.PRODUCT_CODE,'''''''') != IFNULL(S.PRODUCT_CODE,'''''''')\n     OR IFNULL(T.PRODUCT_NAME,'''''''') != IFNULL(S.PRODUCT_NAME,'''''''')\n     OR IFNULL(T.SHOP_KEEPER,'''''''') != IFNULL(S.SHOP_KEEPER,'''''''')\n    )\n    THEN UPDATE \n    SET\n        T.COMPANY_ID = S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.DUKA_NAME= S.DUKA_NAME,\n        T.MARGIN=  S.MARGIN,\n        T.CUSTOMER_ID =S.CUSTOMER_ID,\n        T.POS_ORDER_LINE_ID=  S.POS_ORDER_LINE_ID,\n        T.PRICE=  S.PRICE,\n        T.PRICE_LIST= S.PRICE_LIST,\n        T.PRICE_LIST_ID= S.PRICE_LIST_ID,\n        T.PRODUCT_CATEGORY = S.PRODUCT_CATEGORY,\n        T.PRODUCT_CATEGORY_ID=  S.PRODUCT_CATEGORY_ID,\n        T.PRODUCT_CODE=  S.PRODUCT_CODE,\n        T.PRODUCT_ID=  S.PRODUCT_ID,\n        T.PRODUCT_NAME=  S.PRODUCT_NAME,\n        T.QUANTITY=  S.QUANTITY,\n        T.SHOP_KEEPER= S.SHOP_KEEPER\n        WHEN NOT MATCHED\n    THEN INSERT (\n        COMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,CUSTOMER_ID,\n        DUKA_NAME,MARGIN,POS_ORDER_LINE_ID,PRICE,PRICE_LIST,PRICE_LIST_ID,PRODUCT_CATEGORY,\n        PRODUCT_CATEGORY_ID,PRODUCT_CODE,PRODUCT_ID,PRODUCT_NAME,QUANTITY,SHOP_KEEPER)\n    VALUES (\n        S.COMPANY_ID,S.COUNTRY,S.CREATED_AT, S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.CUSTOMER_ID,\n        S.DUKA_NAME,S.MARGIN,S.POS_ORDER_LINE_ID,S.PRICE,S.PRICE_LIST,S.PRICE_LIST_ID,S.PRODUCT_CATEGORY,\n        S.PRODUCT_CATEGORY_ID,S.PRODUCT_CODE,S.PRODUCT_ID,S.PRODUCT_NAME,S.QUANTITY,S.SHOP_KEEPER\n    );\n    PREVIOUS_COUNT := :SQLROWCOUNT;\n    \n    /* Another Update is done here to ensure that for the first run the staging has ID and the next update block (is_delete) does not give false positives*/\n    \n    UPDATE STAGING.ODOO.SALES\n    SET \n        ID = DEV_INFO.ID,\n        DB_CREATED_AT = DEV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, DB_CREATED_AT, POS_ORDER_LINE_ID FROM SALES.ODOO_SALES\n    ) DEV_INFO\n    WHERE SALES.ID IS NULL AND SALES.POS_ORDER_LINE_ID = DEV_INFO.POS_ORDER_LINE_ID;\n    \n    UPDATE SALES.ODOO_SALES AS TRG\n    SET IS_DELETED = true\n    FROM(\n     SELECT T.ID FROM STAGING.ODOO.SALES AS S\n     RIGHT JOIN SALES.ODOO_SALES AS T \n     ON S.ID = T.ID\n     WHERE S.ID IS NULL\n    ) AS SRC\n    WHERE TRG.ID = SRC.ID;\n    RETURN_VAL := :PREVIOUS_COUNT::varchar || '';'' || :SQLROWCOUNT::varchar;\n    CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\nEND';\n\nCREATE OR REPLACE PROCEDURE DEVELOPMENT.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS()\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS 'DECLARE PREVIOUS_COUNT INTEGER DEFAULT 0; RETURN_VAL VARCHAR;\nBEGIN\n    TRUNCATE TABLE STAGING.ODOO.CUSTOMERS;\n    INSERT INTO STAGING.ODOO.CUSTOMERS(\n        USER_ID,NAME, PHONE_NUMBER,COMPANY_ID,COUNTRY,CREATED_AT,CREATED_BY,DB_UPDATED_AT\n    )\n    SELECT RP.ID,RP.NAME,RP.PHONE_SANITIZED, RP.COMPANY_ID,RC.NAME,RP.CREATE_DATE,\n        STAGING.ODOO.GET_NAME(RU.LOGIN),current_timestamp()\n    FROM LANDING.ODOO.RES_PARTNER RP\n    JOIN LANDING.ODOO.RES_COMPANY RC ON RP.COMPANY_ID = RC.ID\n    JOIN LANDING.ODOO.RES_USERS RU ON RU.ID = RP.CREATE_UID\n    WHERE RP.CUSTOMER = TRUE;\n\n    UPDATE STAGING.ODOO.CUSTOMERS \n    SET\n    COMPANY_ID = CASE WHEN STAGING.ODOO.CUSTOMERS.COMPANY_ID IS NULL THEN USERS.COMPANY_ID ELSE STAGING.ODOO.CUSTOMERS.COMPANY_ID END,\n    COUNTRY = CASE WHEN STAGING.ODOO.CUSTOMERS .COUNTRY IS NULL THEN USERS.COUNTRY ELSE STAGING.ODOO.CUSTOMERS .COUNTRY END\n    FROM (\n    SELECT RP.ID, RC.ID AS COMPANY_ID, RC.NAME AS COUNTRY \n     FROM LANDING.ODOO.RES_PARTNER RP\n    JOIN LANDING.ODOO.RES_COUNTRY RCR ON RP.COUNTRY_ID = RCR.ID\n    JOIN LANDING.ODOO.RES_COMPANY RC ON RC.NAME = RCR.NAME\n    ) USERS\n    WHERE STAGING.ODOO.CUSTOMERS.USER_ID = USERS.ID;\n    \n    UPDATE STAGING.ODOO.CUSTOMERS \n    SET \n        ID = CUST_INFO.ID,\n        DB_CREATED_AT = CUST_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, USER_ID, DB_CREATED_AT FROM CLIENT.ODOO_CUSTOMERS\n    ) CUST_INFO\n    WHERE STAGING.ODOO.CUSTOMERS.ID IS NULL AND STAGING.ODOO.CUSTOMERS.USER_ID = CUST_INFO.USER_ID;\n    \n    MERGE INTO CLIENT.ODOO_CUSTOMERS AS T USING STAGING.ODOO.CUSTOMERS AS S\n    ON T.ID = S.ID\n    WHEN MATCHED AND (\n        IFNULL(T.COMPANY_ID, NULL) != IFNULL(S.COMPANY_ID,NULL)\n     OR IFNULL(T.COUNTRY,'''') != IFNULL(S.COUNTRY,'''')\n     OR IFNULL(T.PHONE_NUMBER,'''') != IFNULL(S.PHONE_NUMBER,'''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.NAME,'''') != IFNULL(S.NAME,'''')\n     OR IFNULL(T.USER_ID,NULL) != IFNULL(S.USER_ID,NULL))\n    THEN UPDATE\n    SET\n        T.COMPANY_ID=S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.PHONE_NUMBER = S.PHONE_NUMBER,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.NAME = S.NAME,\n        T.USER_ID = S.USER_ID\n    \n    WHEN NOT MATCHED\n    THEN INSERT (\n        COMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,NAME,USER_ID, PHONE_NUMBER)\n        VALUES(\n         S.COMPANY_ID,S.COUNTRY,S.CREATED_AT, S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.NAME, S.USER_ID, PHONE_NUMBER\n        );\n    PREVIOUS_COUNT := :SQLROWCOUNT;\n    \n    /* Another Update is done here to ensure that for the first run the staging has ID and the next update block (is_delete) does not give false positives*/\n    UPDATE STAGING.ODOO.CUSTOMERS \n    SET \n        ID = CUST_INFO.ID,\n        DB_CREATED_AT = CUST_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, USER_ID, DB_CREATED_AT FROM CLIENT.ODOO_CUSTOMERS\n    ) CUST_INFO\n    WHERE STAGING.ODOO.CUSTOMERS.ID IS NULL AND STAGING.ODOO.CUSTOMERS.USER_ID = CUST_INFO.USER_ID;\n    \n    UPDATE CLIENT.ODOO_CUSTOMERS AS TRG\n    SET IS_DELETED = true\n    FROM(\n     SELECT T.ID FROM STAGING.ODOO.CUSTOMERS AS S\n     RIGHT JOIN CLIENT.ODOO_CUSTOMERS AS T \n     ON S.ID = T.ID\n     WHERE S.ID IS NULL\n    ) AS SRC\n    WHERE TRG.ID = SRC.ID;\n    RETURN_VAL := :PREVIOUS_COUNT::varchar || '';'' || :SQLROWCOUNT::varchar;\n    CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\n    END';\n    \nCREATE OR REPLACE PROCEDURE DEVELOPMENT.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY()\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS '\nDECLARE PREVIOUS_COUNT INTEGER DEFAULT 0; RETURN_VAL VARCHAR;\nBEGIN\nTRUNCATE TABLE STAGING.ODOO.INVENTORY;\nINSERT INTO STAGING.ODOO.INVENTORY(\n    STOCK_QUANT_ID, LOCATION_ID, LOCATION_NAME, PRODUCT_ID, PRODUCT_NAME, \n    QUANTITY, AVAILABLE_QUANTITY, COMPANY_ID, COUNTRY, CREATED_AT, CREATED_BY\n)\nSELECT \n    SQ.ID, SQ.LOCATION_ID,SL.COMPLETE_NAME, SQ.PRODUCT_ID,PT.NAME, SQ.QUANTITY, SQ.QUANTITY - SQ.RESERVED_QUANTITY, SQ.COMPANY_ID, \n    RC.NAME,SQ.CREATE_DATE, STAGING.ODOO.GET_NAME(RU.LOGIN)  \nFROM LANDING.ODOO.STOCK_QUANT SQ\nJOIN LANDING.ODOO.STOCK_LOCATION SL ON SL.ID = SQ.LOCATION_ID\nJOIN LANDING.ODOO.PRODUCT_TEMPLATE PT ON PT.ID = SQ.PRODUCT_ID\nJOIN LANDING.ODOO.RES_COMPANY RC ON RC.ID = SQ.COMPANY_ID\nJOIN LANDING.ODOO.RES_USERS RU ON RU.ID = SQ.CREATE_UID;\n\nUPDATE STAGING.ODOO.INVENTORY\nSET\nVALUE =  VALUATION.UNIT_COST * QUANTITY\nFROM \n( \n SELECT DISTINCT SV.UNIT_COST,SV.PRODUCT_ID, SV.COMPANY_ID, SV.CREATE_DATE , RANK() OVER (\n    PARTITION BY SV.PRODUCT_ID, SV.COMPANY_ID ORDER BY SV.CREATE_DATE DESC) AS RANK_VAL\n FROM LANDING.ODOO.STOCK_QUANT SQ \n JOIN LANDING.ODOO.STOCK_VALUATION_LAYER SV\n ON SV.COMPANY_ID = SQ.COMPANY_ID AND SV.PRODUCT_ID = SQ.PRODUCT_ID\n WHERE SV.UNIT_COST IS NOT NULL\n    \n) VALUATION\nWHERE STAGING.ODOO.INVENTORY.PRODUCT_ID = VALUATION.PRODUCT_ID \nAND STAGING.ODOO.INVENTORY.COMPANY_ID = VALUATION.COMPANY_ID\nAND VALUATION.RANK_VAL = 1;\n\nUPDATE STAGING.ODOO.INVENTORY\n    SET \n        ID = INV_INFO.ID,\n        DB_CREATED_AT = INV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, STOCK_QUANT_ID, DB_CREATED_AT FROM LOGISTICS.ODOO_INVENTORY\n    ) INV_INFO\n    WHERE STAGING.ODOO.INVENTORY.ID IS NULL AND STAGING.ODOO.INVENTORY.STOCK_QUANT_ID = INV_INFO.STOCK_QUANT_ID;\n    \n    \nMERGE INTO LOGISTICS.ODOO_INVENTORY AS T USING STAGING.ODOO.INVENTORY AS S\n    ON T.ID = S.ID\nWHEN MATCHED AND (\n     IFNULL(T.COMPANY_ID, NULL) != IFNULL(S.COMPANY_ID,NULL)\n     OR IFNULL(T.COUNTRY,'''') != IFNULL(S.COUNTRY,'''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.STOCK_QUANT_ID,NULL) != IFNULL(S.STOCK_QUANT_ID,NULL)\n     OR IFNULL(T.LOCATION_ID,NULL) != IFNULL(S.LOCATION_ID,NULL)\n     OR IFNULL(T.LOCATION_NAME,'''') != IFNULL(S.LOCATION_NAME,'''')\n     OR IFNULL(T.PRODUCT_ID,NULL) != IFNULL(S.PRODUCT_ID,NULL)\n     OR IFNULL(T.PRODUCT_NAME,'''') != IFNULL(S.PRODUCT_NAME,'''')\n     OR IFNULL(T.QUANTITY,NULL) != IFNULL(S.QUANTITY,NULL)\n     OR IFNULL(T.AVAILABLE_QUANTITY,NULL) != IFNULL(S.AVAILABLE_QUANTITY,NULL)\n     OR IFNULL(T.VALUE,NULL) != IFNULL(S.VALUE,NULL)\n)\nTHEN UPDATE\nSET  \n      T.COMPANY_ID = S.COMPANY_ID,\n      T.COUNTRY = S.COUNTRY,\n      T.CREATED_AT = S.CREATED_AT,\n      T.CREATED_BY = S.CREATED_BY,\n      T.DB_UPDATED_AT = S.DB_UPDATED_AT,\n      T.STOCK_QUANT_ID = S.STOCK_QUANT_ID,\n      T.LOCATION_ID  = S.LOCATION_ID,\n      T.LOCATION_NAME = S.LOCATION_NAME,\n      T.PRODUCT_ID = S.PRODUCT_ID,\n      T.PRODUCT_NAME = S.PRODUCT_NAME,\n      T.QUANTITY = S.QUANTITY,\n      T.AVAILABLE_QUANTITY = S.AVAILABLE_QUANTITY,\n      T.VALUE = S.VALUE\n      \nWHEN NOT MATCHED\n    THEN INSERT (\n        STOCK_QUANT_ID, LOCATION_ID, LOCATION_NAME, PRODUCT_ID, PRODUCT_NAME, QUANTITY, \n        COMPANY_ID, COUNTRY, CREATED_AT, CREATED_BY, AVAILABLE_QUANTITY,VALUE )\n    VALUES(\n        S.STOCK_QUANT_ID, S.LOCATION_ID, S.LOCATION_NAME, S.PRODUCT_ID, S.PRODUCT_NAME, S.QUANTITY, \n        S.COMPANY_ID, S.COUNTRY, S.CREATED_AT, S.CREATED_BY, S.AVAILABLE_QUANTITY, S.VALUE \n    );\n     PREVIOUS_COUNT := :SQLROWCOUNT;\n    \n    /* Another Update is done here to ensure that for the first run the staging has ID and the next update block (is_delete) does not give false positives*/\n     \n     UPDATE STAGING.ODOO.INVENTORY\n    SET \n        ID = INV_INFO.ID,\n        DB_CREATED_AT = INV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, STOCK_QUANT_ID, DB_CREATED_AT FROM LOGISTICS.ODOO_INVENTORY\n    ) INV_INFO\n    WHERE STAGING.ODOO.INVENTORY.ID IS NULL AND STAGING.ODOO.INVENTORY.STOCK_QUANT_ID = INV_INFO.STOCK_QUANT_ID;\n    \n    UPDATE LOGISTICS.ODOO_INVENTORY AS TRG\n    SET IS_DELETED = true\n    FROM(\n     SELECT T.ID FROM STAGING.ODOO.INVENTORY AS S\n     RIGHT JOIN LOGISTICS.ODOO_INVENTORY AS T \n     ON S.ID = T.ID\n     WHERE S.ID IS NULL\n    ) AS SRC\n    WHERE TRG.ID = SRC.ID;\n    RETURN_VAL := :PREVIOUS_COUNT::varchar || '';'' || :SQLROWCOUNT::varchar;\n    CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\nEND';\n\n-- 5. CREATE PRODUCTION TABLES\n\nCREATE OR REPLACE TABLE PRODUCTION.SALES.ODOO_SALES (\n\tID NUMBER(38,0) autoincrement (1,1) COMMENT 'dwh id for sale',\n    POS_ORDER_LINE_ID NUMBER(38,0) NOT NULL COMMENT 'id for the single product sold at any shop at any time from pos_order_line.id',\n\tPRODUCT_ID NUMBER(38,0) NOT NULL COMMENT 'product_template.id',\n\tPRODUCT_NAME VARCHAR(100) NOT NULL COMMENT 'product_template.name',\n\tPRODUCT_CATEGORY_ID NUMBER(38,0) COMMENT 'product_category.id with foreign key to product_template.categ_id',\n\tPRODUCT_CATEGORY VARCHAR(100) COMMENT 'product_category.name',\n\tPRODUCT_CODE VARCHAR(50)  COMMENT 'product_template.default_code',\n\tPRICE FLOAT COMMENT 'price from general (product_template.listprice) or country specific price list (product_pricelist_item.fixed_price)',\n    PRICE_LIST_ID NUMBER(8, 0) COMMENT 'product.pricelist_item.pricelist_id or 1 (default public price list)', \n\tPRICE_LIST VARCHAR(100) COMMENT 'price list use to get the price. Could be the default price list which matches product_template.list_price or country specific price (product_pricelist.name)',\n\tQUANTITY FLOAT NOT NULL COMMENT 'Pos_Order_line.qty',\n\tMARGIN NUMBER(38,0) COMMENT 'calculated difference between average sale price - average purchase price',\n\tCOMPANY_ID NUMBER(38,0) NOT NULL COMMENT 'pos_order_line.company_id',\n    CUSTOMER_ID NUMBER(38,0) COMMENT 'ID of the customer purchasing the product',\n\tCOUNTRY VARCHAR(50) NOT NULL COMMENT 'res_company.name given pos_order_line.company_id',\n\tDUKA_NAME VARCHAR(100) COMMENT 'res_shop.name given pos_order.id',\n\tSHOP_KEEPER VARCHAR(50) COMMENT 'name of shopowner gotten from res_users.login given pos_order_line.user_id',\n\tCREATED_AT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'pos_order_line.create_date',\n\tCREATED_BY VARCHAR(50) NOT NULL COMMENT 'name of user who inputted the sale, gotten from res_users.login given the pos_order_line.create_uid',\n    IS_DELETED BOOLEAN DEFAULT FALSE COMMENT 'data previously existed but no longer in staging',\n\tDB_CREATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp() COMMENT 'date and time sales data is inputted into the dwh',\n\tDB_UPDATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp() COMMENT 'date and time sales data is updated into the dwh',\n\tSOURCE VARCHAR(10) NOT NULL DEFAULT 'Odoo'\n);\n\n\nCREATE OR REPLACE TABLE PRODUCTION.CLIENT.ODOO_CUSTOMERS (\n ID NUMBER(38,0) autoincrement (1,1) comment 'dwh id for customer',\n user_id number (5) not null comment 'res_partners.id',\n name varchar(100) not null comment 'res_partners.name',\n phone_number varchar(50) comment 'res_partners.phone_sanitized',\n company_id number(4)  comment 'res_partners.company_id or fill from res_partners.country_id',\n country varchar(100) comment 'res_company.name',\n created_at datetime not null comment 'res_partners.create_date',\n created_by varchar(50) not null comment 'name of admin who created user res_users.login',\n IS_DELETED BOOLEAN DEFAULT FALSE COMMENT 'data previously existed but no longer in staging',\n db_created_at  TIMESTAMP_NTZ(9) DEFAULT current_timestamp() comment 'date and time sales data is inputted into the dwh',\n db_updated_at TIMESTAMP_NTZ(9) DEFAULT current_timestamp() comment 'date and time sales data is updated into the dwh',\n source varchar(10) not null default 'Odoo'\n);\n\ncreate or replace TABLE PRODUCTION.LOGISTICS.ODOO_INVENTORY (\n\tID NUMBER(38,0) autoincrement(1,1) NOT NULL COMMENT 'dwh id for inventory record',\n    STOCK_QUANT_ID NUMBER(8,0) NOT NULL COMMENT 'stock_quant.id',\n\tLOCATION_ID NUMBER(8,0) NOT NULL  COMMENT 'stock_quant.location_id',\n\tLOCATION_NAME VARCHAR(100) NOT NULL  COMMENT 'stock_location.name given stock_quant.location_id',\n\tPRODUCT_ID NUMBER(8,0) NOT NULL COMMENT 'stock_quant.product_id',\n\tPRODUCT_NAME VARCHAR(100) NOT NULL COMMENT 'product_template.name given stock_quant.product_id',\n\tQUANTITY NUMBER(8,0) NOT NULL COMMENT 'stock_quant.quantity',\n\tAVAILABLE_QUANTITY NUMBER(8,0) COMMENT 'quantity available in odoo',\n\tVALUE NUMBER(20,0),\n\tCOMPANY_ID NUMBER(4,0) NOT NULL COMMENT 'stock_quant.company_id',\n\tCOUNTRY VARCHAR(100) NOT NULL COMMENT 'res_company.name',\n\tCREATED_AT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'res_partners.create_date',\n\tCREATED_BY VARCHAR(50) NOT NULL COMMENT 'name of admin who created user res_users.login',\n    IS_DELETED BOOLEAN DEFAULT FALSE COMMENT 'data previously existed but no longer in staging',\n\tDB_CREATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp()  COMMENT 'date and time sales data is inputted into the dwh',\n\tDB_UPDATED_AT TIMESTAMP_NTZ(9) DEFAULT current_timestamp()  COMMENT 'date and time sales data is updated into the dwh',\n\tSOURCE VARCHAR(10) NOT NULL DEFAULT 'Odoo'\n);\n--6. CREATE VIEWS FOR DEVELOPMENT FOR (QA)\n\ncreate or replace view DEVELOPMENT.SALES.V_ODOO_SALES(\n\tID,\n\tPOS_ORDER_LINE_ID,\n\tPRODUCT_ID,\n\tPRODUCT_NAME,\n\tPRODUCT_CATEGORY_ID,\n\tPRODUCT_CATEGORY,\n\tPRODUCT_CODE,\n\tPRICE,\n\tPRICE_LIST_ID,\n\tPRICE_LIST,\n\tQUANTITY,\n\tMARGIN,\n\tCOMPANY_ID,\n\tCUSTOMER_ID,\n\tCOUNTRY,\n\tDUKA_NAME,\n\tSHOP_KEEPER,\n\tCREATED_AT,\n\tCREATED_BY,\n\tIS_DELETED,\n\tDB_CREATED_AT,\n\tDB_UPDATED_AT,\n\tSOURCE\n) as \nSELECT * FROM SALES.ODOO_SALES;\n\ncreate or replace view DEVELOPMENT.SALES.V_ODOO_SALES_MERGED(\n\tID,\n\tPRODUCT_NAME,\n\tPRODUCT_CATEGORY,\n\tPRODUCT_CODE,\n\tPRICE,\n\tPRICE_LIST,\n\tQUANTITY_SOLD,\n\tCOUNTRY,\n\tDUKA_NAME,\n\tSHOP_KEEPER,\n\tCLIENT_NAME,\n\tCLIENT_PHONENUMBER,\n\tCREATED_AT,\n\tCREATED_BY\n) as \nSELECT OS.ID, OS.PRODUCT_NAME,\nOS.PRODUCT_CATEGORY, OS.PRODUCT_CODE, OS.PRICE, OS.PRICE_LIST, \nOS.QUANTITY AS QUANTITY_SOLD, OS.COUNTRY, OS.DUKA_NAME, OS.SHOP_KEEPER,\nOC.NAME AS CLIENT_NAME, OC.PHONE_NUMBER AS CLIENT_PHONENUMBER,  OS.CREATED_AT, OS.CREATED_BY\nFROM SALES.ODOO_SALES OS\nJOIN CLIENT.ODOO_CUSTOMERS OC ON OC.USER_ID = OS.CUSTOMER_ID;\n\ncreate or replace view DEVELOPMENT.LOGISTICS.V_ODOO_INVENTORY(\n\tID,\n\tSTOCK_QUANT_ID,\n\tLOCATION_ID,\n\tLOCATION_NAME,\n\tPRODUCT_ID,\n\tPRODUCT_NAME,\n\tQUANTITY,\n\tAVAILABLE_QUANTITY,\n\tVALUE,\n\tCOMPANY_ID,\n\tCOUNTRY,\n\tCREATED_AT,\n\tCREATED_BY,\n\tIS_DELETED,\n\tDB_CREATED_AT,\n\tDB_UPDATED_AT,\n\tSOURCE\n) as\nSELECT * FROM LOGISTICS.ODOO_INVENTORY;\n\ncreate or replace view DEVELOPMENT.CLIENT.V_ODOO_CUSTOMERS(\n\tID,\n\tUSER_ID,\n\tNAME,\n\tPHONE_NUMBER,\n\tCOMPANY_ID,\n\tCOUNTRY,\n\tCREATED_AT,\n\tCREATED_BY,\n\tIS_DELETED,\n\tDB_CREATED_AT,\n\tDB_UPDATED_AT,\n\tSOURCE\n) as\nSELECT * FROM CLIENT.ODOO_CUSTOMERS;\n\n-- 7. CREATE PROCEDURES FOR MERGING DATA FROM DEVELOPMENT INTO PRODUCTION\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS()\nRETURNS NUMBER(38,0)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS 'BEGIN\nMERGE INTO PRODUCTION.CLIENT.ODOO_CUSTOMERS AS T USING DEVELOPMENT.CLIENT.ODOO_CUSTOMERS AS S\n    ON T.ID = S.ID\n    WHEN MATCHED AND (\n        IFNULL(T.COMPANY_ID, NULL) != IFNULL(S.COMPANY_ID,NULL)\n     OR IFNULL(T.COUNTRY,'''''''') != IFNULL(S.COUNTRY,'''''''')\n     OR IFNULL(T.PHONE_NUMBER,'''''''') != IFNULL(S.PHONE_NUMBER,'''''''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.NAME,'''''''') != IFNULL(S.NAME,'''''''')\n     OR IFNULL(T.USER_ID,NULL) != IFNULL(S.USER_ID,NULL))\n    THEN UPDATE\n    SET\n        T.COMPANY_ID=S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.PHONE_NUMBER = S.PHONE_NUMBER,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.NAME = S.NAME,\n        T.USER_ID = S.USER_ID\n    \n    WHEN NOT MATCHED\n    THEN INSERT (\n        COMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,NAME,USER_ID, PHONE_NUMBER)\n        VALUES(\n         S.COMPANY_ID,S.COUNTRY,S.CREATED_AT, S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.NAME, S.USER_ID, PHONE_NUMBER\n        );\nRETURN :SQLROWCOUNT;\nEND';\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY()\nRETURNS NUMBER(38,0)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS 'BEGIN\nMERGE INTO PRODUCTION.LOGISTICS.ODOO_INVENTORY AS T USING DEVELOPMENT.LOGISTICS.ODOO_INVENTORY AS S\n    ON T.ID = S.ID\nWHEN MATCHED AND (\n     IFNULL(T.COMPANY_ID, NULL) != IFNULL(S.COMPANY_ID,NULL)\n     OR IFNULL(T.COUNTRY,'''''''') != IFNULL(S.COUNTRY,'''''''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.STOCK_QUANT_ID,NULL) != IFNULL(S.STOCK_QUANT_ID,NULL)\n     OR IFNULL(T.LOCATION_ID,NULL) != IFNULL(S.LOCATION_ID,NULL)\n     OR IFNULL(T.LOCATION_NAME,'''''''') != IFNULL(S.LOCATION_NAME,'''''''')\n     OR IFNULL(T.PRODUCT_ID,NULL) != IFNULL(S.PRODUCT_ID,NULL)\n     OR IFNULL(T.PRODUCT_NAME,'''''''') != IFNULL(S.PRODUCT_NAME,'''''''')\n     OR IFNULL(T.QUANTITY,NULL) != IFNULL(S.QUANTITY,NULL)\n     OR IFNULL(T.AVAILABLE_QUANTITY,NULL) != IFNULL(S.AVAILABLE_QUANTITY,NULL)\n     OR IFNULL(T.VALUE,NULL) != IFNULL(S.VALUE,NULL)\n)\nTHEN UPDATE\nSET  \n      T.COMPANY_ID = S.COMPANY_ID,\n      T.COUNTRY = S.COUNTRY,\n      T.CREATED_AT = S.CREATED_AT,\n      T.CREATED_BY = S.CREATED_BY,\n      T.DB_UPDATED_AT = S.DB_UPDATED_AT,\n      T.STOCK_QUANT_ID = S.STOCK_QUANT_ID,\n      T.LOCATION_ID  = S.LOCATION_ID,\n      T.LOCATION_NAME = S.LOCATION_NAME,\n      T.PRODUCT_ID = S.PRODUCT_ID,\n      T.PRODUCT_NAME = S.PRODUCT_NAME,\n      T.QUANTITY = S.QUANTITY,\n      T.AVAILABLE_QUANTITY = S.AVAILABLE_QUANTITY,\n      T.VALUE = S.VALUE\n      \nWHEN NOT MATCHED\n    THEN INSERT (\n        STOCK_QUANT_ID, LOCATION_ID, LOCATION_NAME, PRODUCT_ID, PRODUCT_NAME, QUANTITY, \n        COMPANY_ID, COUNTRY, CREATED_AT, CREATED_BY, AVAILABLE_QUANTITY,VALUE )\n    VALUES(\n        S.STOCK_QUANT_ID, S.LOCATION_ID, S.LOCATION_NAME, S.PRODUCT_ID, S.PRODUCT_NAME, S.QUANTITY, \n        S.COMPANY_ID, S.COUNTRY, S.CREATED_AT, S.CREATED_BY, S.AVAILABLE_QUANTITY, S.VALUE \n    );\nRETURN :SQLROWCOUNT;\nEND';\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.SALES.SP_INCREMENTLOAD_ODOO_SALES()\nRETURNS NUMBER(38,0)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS 'BEGIN\n\nMERGE INTO PRODUCTION.SALES.ODOO_SALES AS T USING DEVELOPMENT.SALES.ODOO_SALES AS S\n    ON T.ID = S.ID\n    WHEN MATCHED \n    AND (\n        ZEROIFNULL(T.COMPANY_ID) != ZEROIFNULL(S.COMPANY_ID)\n     OR ZEROIFNULL(T.MARGIN) != ZEROIFNULL(S.MARGIN)\n     OR ZEROIFNULL(T.POS_ORDER_LINE_ID) != ZEROIFNULL(S.POS_ORDER_LINE_ID)\n     OR ZEROIFNULL(T.PRICE) != ZEROIFNULL(S.PRICE)\n     OR ZEROIFNULL(T.PRICE_LIST_ID) != ZEROIFNULL(S.PRICE_LIST_ID)\n     OR ZEROIFNULL(T.CUSTOMER_ID) != ZEROIFNULL(S.CUSTOMER_ID)\n     OR ZEROIFNULL(T.PRODUCT_CATEGORY_ID) != ZEROIFNULL(S.PRODUCT_CATEGORY_ID)\n     OR ZEROIFNULL(T.PRODUCT_ID) != ZEROIFNULL(S.PRODUCT_ID)\n     OR ZEROIFNULL(T.QUANTITY) != ZEROIFNULL(S.QUANTITY)\n     OR IFNULL(T.COUNTRY,'''''''''''''''') != IFNULL(S.COUNTRY,'''''''''''''''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.DUKA_NAME,'''''''''''''''') != IFNULL(S.DUKA_NAME,'''''''''''''''')\n     OR IFNULL(T.PRICE_LIST,'''''''''''''''') != IFNULL(S.PRICE_LIST,'''''''''''''''')\n     OR IFNULL(T.PRODUCT_CATEGORY,'''''''''''''''') != IFNULL(S.PRODUCT_CATEGORY,'''''''''''''''')\n     OR IFNULL(T.PRODUCT_CODE,'''''''''''''''') != IFNULL(S.PRODUCT_CODE,'''''''''''''''')\n     OR IFNULL(T.PRODUCT_NAME,'''''''''''''''') != IFNULL(S.PRODUCT_NAME,'''''''''''''''')\n     OR IFNULL(T.SHOP_KEEPER,'''''''''''''''') != IFNULL(S.SHOP_KEEPER,'''''''''''''''')\n    )\n    THEN UPDATE \n    SET\n        T.COMPANY_ID = S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.DUKA_NAME= S.DUKA_NAME,\n        T.MARGIN=  S.MARGIN,\n        T.CUSTOMER_ID =S.CUSTOMER_ID,\n        T.POS_ORDER_LINE_ID=  S.POS_ORDER_LINE_ID,\n        T.PRICE=  S.PRICE,\n        T.PRICE_LIST= S.PRICE_LIST,\n        T.PRICE_LIST_ID= S.PRICE_LIST_ID,\n        T.PRODUCT_CATEGORY = S.PRODUCT_CATEGORY,\n        T.PRODUCT_CATEGORY_ID=  S.PRODUCT_CATEGORY_ID,\n        T.PRODUCT_CODE=  S.PRODUCT_CODE,\n        T.PRODUCT_ID=  S.PRODUCT_ID,\n        T.PRODUCT_NAME=  S.PRODUCT_NAME,\n        T.QUANTITY=  S.QUANTITY,\n        T.SHOP_KEEPER= S.SHOP_KEEPER\n        WHEN NOT MATCHED\n    THEN INSERT (\n        COMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,CUSTOMER_ID,\n        DUKA_NAME,MARGIN,POS_ORDER_LINE_ID,PRICE,PRICE_LIST,PRICE_LIST_ID,PRODUCT_CATEGORY,\n        PRODUCT_CATEGORY_ID,PRODUCT_CODE,PRODUCT_ID,PRODUCT_NAME,QUANTITY,SHOP_KEEPER)\n    VALUES (\n        S.COMPANY_ID,S.COUNTRY,S.CREATED_AT, S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.CUSTOMER_ID,\n        S.DUKA_NAME,S.MARGIN,S.POS_ORDER_LINE_ID,S.PRICE,S.PRICE_LIST,S.PRICE_LIST_ID,S.PRODUCT_CATEGORY,\n        S.PRODUCT_CATEGORY_ID,S.PRODUCT_CODE,S.PRODUCT_ID,S.PRODUCT_NAME,S.QUANTITY,S.SHOP_KEEPER\n    );\n    RETURN :SQLROWCOUNT;\nEND';\n\n-- 8. Create Production data quality checks\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\"DEVELOPMENT_DATASET\" VARCHAR(16777216), \"PRODUCTION_DATASET\" VARCHAR(16777216), \"PRIMARY_IDENTIFIER\" VARCHAR(16777216), \"UNIQUE_IDENTIFIER\" VARCHAR(16777216), \"PRODUCTION_STORED_PROCEDURE\" VARCHAR(16777216))\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS 'DECLARE PREVIOUS_COUNT INTEGER DEFAULT 0;\nRETURN_VAL VARCHAR; \nROW_COUNT1 INTEGER DEFAULT 0;\nROW_COUNT2 INTEGER DEFAULT 0;\nQUALITY_CHECK_EXCEPTION EXCEPTION (-20023, ''''); \nERRM varchar;\nBEGIN \n\n/*1.ENSURE NO ROW WITH NULL ID ARE PASSED TO PRODUCTION\n    ROW_COUNT1: COUNT OF ROWS WITH NULL ID\n    LOGIC: IF THERE EXISTS A ROW WITH NULL ID THEN RAISE QUALITY CHECK EXCEPTION AND STOP THE FLOW\n*/    \nSELECT COUNT(identifier(:UNIQUE_IDENTIFIER)) INTO :ROW_COUNT1 FROM identifier(:DEVELOPMENT_DATASET) WHERE identifier(:PRIMARY_IDENTIFIER) IS NULL; \n      IF (:ROW_COUNT1 > 0) THEN\n          --Another way to assign values to declared variables\n          ERRM := ''NULL '' || :PRIMARY_IDENTIFIER || '' EXISTS IN '' || :DEVELOPMENT_DATASET ;\n          RAISE QUALITY_CHECK_EXCEPTION;\n      END IF;\n      \n/*2.ENSURE DATA IS NOT DELETED MANUALLY FROM PRODUCTION BUT RATHER MARKED AS IS_DELETED\n    PREVIOUS_COUNT: COUNT OF ROWS IN THE COLUMN USING THE PRIMARY IDENTIFIER COLUMN (USUALLY ID) FROM                             PRODUCTION TABLE\n    RETURN_VAL: THE RETURN VALUE FOR THE MOST RECENT PREVIOUS RUN OF THIS SPECIFIC TASK (DIFFERENT FROM TASK                 PREDECESSOR) GOTTEN.BY QUERYING THE TASK HISTORY USING THE TASK NAME. THIS RETURN VALUE IS SAVED AS COUNT OF ROWS IN THE TABLE FROM THE PREVIOUS TASK RUN\n    LOGIC: IF THE PREVIOUS_COUNT < RETURN_VAL, THEN DATA HAS BEEN MANUALLY DELETED, RAISE EXCEPTION AND STOP THE FLOW\n   \n*/\n      SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :PREVIOUS_COUNT FROM \n      identifier(:PRODUCTION_DATASET);\n      \n      SELECT TOP 1 identifier(:PRIMARY_IDENTIFIER) INTO :RETURN_VAL FROM \n      identifier(:PRODUCTION_DATASET) ORDER BY identifier(:PRIMARY_IDENTIFIER) DESC;\n\n      IF( :PREVIOUS_COUNT < :RETURN_VAL::INTEGER ) THEN\n          ERRM := ''DATA MANUALLY DELETED FROM ''|| :PRODUCTION_DATASET;\n          RAISE QUALITY_CHECK_EXCEPTION;\n      END IF;\n      \n  BEGIN TRANSACTION;\n   \n/*3.ENSURE DATA COMPLETENESS (i.e  DATA IN PRODUCTION IS MORE OR EQUAL TO THAT IN DEVELOPMENT)\n    PREVIOUS_COUNT: COUNT OF ROWS IN THE COLUMN USING THE PRIMARY IDENTIFIER COLUMN (USUALLY ID) FROM                             PRODUCTION TABLE BEFORE CALLING THE STORED PROCEDURE.\n    ROW_COUNT1: THE TOTAL NUMBER OF NEW ROWS INSERTED OR UPDATED FROM THE ACTION OF CALLING THE PRODUCTION                   STORED PROCEDURE.\n    ROW_COUNT2: THE TOTAL NUMBER OF ROWS IN DEVELOPMENT TABLE;\n    LOGIC: THE PREVIOUS_NUMBER OF ROWS BEFORE CALLING STORED PROCEDURE + ROWS INSERTED AFTER CALLING THE                PROCEDURE SHOULD ALWAYS BE GREATER (GIVEN IS_DELETED IF FOR SOME REASON DEVELOPMENT IS WIPED CLEAN) OR EQUAL TO NUMBER OF ROWS IN DEVELOPMENT. IF NOT ROLLBACK THE DATA TRANSFER TRANSACTION, THEN RAISE AN EXCEPTION AND STOP THE FLOW.\n*/\n   \n        CALL identifier(:PRODUCTION_STORED_PROCEDURE)() INTO :ROW_COUNT1;\n  \n        SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :ROW_COUNT2 FROM \n        identifier(:DEVELOPMENT_DATASET);\n        IF((:PREVIOUS_COUNT + :ROW_COUNT1) < :ROW_COUNT2)   \n            THEN \n            ERRM := ''INCOMPLETE DATA TRANSFER FROM ''|| :DEVELOPMENT_DATASET || ''TO ''|| :PRODUCTION_DATASET;\n            ROLLBACK;\n      // Another way to assign values to declared variables\n            RAISE QUALITY_CHECK_EXCEPTION;\n        END IF; \n        \n/*4.ENSURE UNIQUNESS OF ROWS PASSED TO PRODUCTION\n    PREVIOUS_COUNT: COUNT OF ROWS IN THE COLUMN USING THE PRIMARY IDENTIFIER COLUMN (USUALLY ID) FROM                             PRODUCTION TABLE AFTER CALLING THE STORED PROCEDURE\n    ROW_COUNT1: THE TOTAL NUMBER OF ROWS WITH IS_DELETED FLAG IN PRODUCTION_TABLE.TWO ROWS CAN HAVE THE SAME UNIQUE IDENTIFIER ONLY IF ONE ROWS HAS IS_DELETED FLAG\n    ROW_COUNT2: THE TOTAL NUMBER OF ROWS OF DISTINCT UNIQUE IDENTIFIERS IN PRODUCTION TABLE;\n    LOGIC: IF TOTAL NUMBER OF ROWS OF DISTINCT UNIQUE IDENTIFIERS IS LESS THAN TOTAL NUMBER OF ROWS - ROWS WITH IS_DELETED FLAG THEN THERE ARE ROWS WITH NON UNIQUE DATA\n*/\n        \n        SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :ROW_COUNT1 FROM identifier(:PRODUCTION_DATASET) \n        WHERE IS_DELETED = TRUE;\n        SELECT COUNT(DISTINCT identifier(:UNIQUE_IDENTIFIER)) INTO :ROW_COUNT2 FROM \n        identifier(:PRODUCTION_DATASET);\n        SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :PREVIOUS_COUNT FROM  \n        identifier(:PRODUCTION_DATASET);\n        \n        IF (:ROW_COUNT2 < (:PREVIOUS_COUNT - :ROW_COUNT1))\n          THEN\n          ERRM := ''DATA IN '' || :PRODUCTION_DATASET ||'' NOT UNIQUE'';\n          ROLLBACK;\n          RAISE QUALITY_CHECK_EXCEPTION;\n        END IF;\n        -- Convert previous count to varchar and set it to return value shown in tasks\n        RETURN_VAL := :PREVIOUS_COUNT::VARCHAR;\n        CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\n    COMMIT;\n    \n    -- Handle exceptions\n      \n    EXCEPTION\n    \n    WHEN QUALITY_CHECK_EXCEPTION THEN\n        CALL SYSTEM$SET_RETURN_VALUE(:ERRM);\n        RETURN object_construct(''ERROR TYPE'', ''QUALITY_CHECK_EXCEPTION'',\n                            ''SQLCODE'', sqlcode,\n                            ''SQLERRM'', :ERRM,\n                            ''SQLSTATE'', sqlstate);\n                            \n  -- return infor if no exception.\n    RETURN ''ALL DATA QUALITY CHECKS PASSED AND DATA SUCCESSFULLY TRANSFERRED FROM'' || :DEVELOPMENT_DATASET || '' TO '' || :PRODUCTION_DATASET ;\n \nEND';\n\n-- 9. Test false positive for quality checks\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.PUBLIC.SP_CHECK_TEST_INCREMENTLOAD(\"DEV_TABLE\" VARCHAR(16777216), \"PROD_TABLE\" VARCHAR(16777216), \"PRIMARY_IDENTIFIER\" VARCHAR(16777216), \"UNIQUE_IDENTIFIER\" VARCHAR(16777216), \"PRODUCTION_STORED_PROCEDURE\" VARCHAR(16777216))\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS 'DECLARE\nRETURN_VAL OBJECT;\nDATE_OF_LAST_FALSE_POSITIVE_CHECK datetime;\nDATE_OF_LAST_ALTERATION_OF_QUALITY_CHECK datetime;\nQUALITY_CHECK_TEST_EXCEPTION EXCEPTION (-20020, ''''); \nMESSAGE varchar;\nBEGIN\n\nSELECT TOP 1 COMPLETED_TIME INTO :DATE_OF_LAST_FALSE_POSITIVE_CHECK  FROM table(development.information_schema.task_history()) WHERE NAME = ''RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_SALES'' AND STATE = ''SUCCEEDED'';\n\nSELECT TOP 1 LAST_ALTERED INTO :DATE_OF_LAST_ALTERATION_OF_QUALITY_CHECK FROM PRODUCTION.INFORMATION_SCHEMA.procedures WHERE PROCEDURE_NAME = ''SP_CHECK_INCREMENTLOAD'';\n\nIF(:DATE_OF_LAST_FALSE_POSITIVE_CHECK > :DATE_OF_LAST_ALTERATION_OF_QUALITY_CHECK )\nTHEN \n    LET VAL VARCHAR := ''FALSE POSITIVE TEST SKIPPED: NO CHANGES MADE TO'' || :PRODUCTION_STORED_PROCEDURE;\n    CALL SYSTEM$SET_RETURN_VALUE(:VAL);\n    RETURN :VAL;\nEND IF;\n\nCREATE TEMPORARY TABLE TEMP_DEV LIKE IDENTIFIER(:DEV_TABLE);\nCREATE TEMPORARY TABLE TEMP_PROD LIKE IDENTIFIER(:PROD_TABLE);\nINSERT INTO TEMP_DEV SELECT TOP 1 * FROM IDENTIFIER(:DEV_TABLE);\nALTER TABLE TEMP_DEV ALTER COLUMN ID DROP NOT NULL; \nUPDATE TEMP_DEV SET ID = NULL;\n\nCALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n    ''TEMP_DEV'', ''TEMP_PROD'',\n    :PRIMARY_IDENTIFIER, \n    :UNIQUE_IDENTIFIER,\n    :PRODUCTION_STORED_PROCEDURE \n) INTO :RETURN_VAL;\nIF((TYPEOF(:RETURN_VAL)!= ''OBJECT'') OR( GET(:RETURN_VAL, ''SQLERRM'') != ''NULL '' || :PRIMARY_IDENTIFIER || '' EXISTS IN TEMP_DEV''  ))\nTHEN \n    RAISE QUALITY_CHECK_TEST_EXCEPTION;\nEND IF;\n\nTRUNCATE TABLE TEMP_DEV;\n\nALTER TABLE TEMP_DEV ALTER COLUMN ID SET NOT NULL; \nINSERT INTO TEMP_DEV SELECT TOP 5 * FROM IDENTIFIER(:DEV_TABLE);\nINSERT INTO TEMP_PROD SELECT * FROM TEMP_DEV;\nDELETE FROM TEMP_PROD WHERE identifier(:PRIMARY_IDENTIFIER) = 3;\n\nCALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n    ''TEMP_DEV'', ''TEMP_PROD'',\n    :PRIMARY_IDENTIFIER, \n    :UNIQUE_IDENTIFIER,\n    :PRODUCTION_STORED_PROCEDURE\n) INTO :RETURN_VAL;\nIF((TYPEOF(:RETURN_VAL)!= ''OBJECT'') OR( GET(:RETURN_VAL, ''SQLERRM'') != ''DATA MANUALLY DELETED FROM TEMP_PROD''))\nTHEN \n    RAISE QUALITY_CHECK_TEST_EXCEPTION;\nEND IF;\n\nTRUNCATE TABLE TEMP_DEV;\nINSERT INTO TEMP_DEV SELECT TOP 1 * FROM IDENTIFIER(:DEV_TABLE);\nUPDATE TEMP_DEV SET IS_DELETED = TRUE;\nINSERT INTO TEMP_DEV SELECT TOP 1 * FROM IDENTIFIER(:DEV_TABLE);\nINSERT INTO TEMP_DEV SELECT TOP 1 * FROM IDENTIFIER(:DEV_TABLE);\nTRUNCATE TABLE TEMP_PROD;\nINSERT INTO TEMP_PROD SELECT * FROM TEMP_DEV;\n\nCALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n    ''TEMP_DEV'', ''TEMP_PROD'',\n    :PRIMARY_IDENTIFIER, \n    :UNIQUE_IDENTIFIER,\n    :PRODUCTION_STORED_PROCEDURE\n) INTO :RETURN_VAL;\nif((TYPEOF(:RETURN_VAL)!=''OBJECT'') OR( GET(:RETURN_VAL, ''SQLERRM'') != ''DATA IN TEMP_PROD NOT UNIQUE''))\nTHEN\n    RAISE QUALITY_CHECK_TEST_EXCEPTION;\nEND IF;\n\nCALL SYSTEM$SET_RETURN_VALUE(''FALSE POSITIVE TEST PASSED'');\n\nEXCEPTION \n    WHEN  QUALITY_CHECK_TEST_EXCEPTION THEN\n    MESSAGE := ''FALSE POSITIVE TEST FAILED : ''|| GET(:RETURN_VAL, ''SQLERRM'');\n    CALL SYSTEM$SET_RETURN_VALUE(:MESSAGE);\n    RAISE;   \nEND';\n\n-- 10  Create and start tasks dags\n\nCREATE OR REPLACE TASK DEVELOPMENT.SALES.RUN_SP_INCREMENTLOAD_ODOO_SALES\nWAREHOUSE='DEV_WH'\nSCHEDULE = 'USING CRON 59 0 * * * Africa/Maputo'\nUSER_TASK_TIMEOUT_MS = 1200000\nSUSPEND_TASK_AFTER_NUM_FAILURES = 3\nCOMMENT = 'THIS TASK IS MEANT TO RUN THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK AND A MAXIMUM OF 3 FAILURES'\nAS \nCALL DEVELOPMENT.SALES.SP_INCREMENTLOAD_ODOO_SALES();\n\nCREATE OR REPLACE TASK DEVELOPMENT.SALES.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_SALES\nWAREHOUSE='DEV_WH'\nUSER_TASK_TIMEOUT_MS = 1200000\nCOMMENT = 'THIS TASK IS MEANT TO TEST FALSE POSITIVE IN QUALITY CHECKS'\n--AFTER DEVELOPMENT.SALES.RUN_SP_INCREMENTLOAD_ODOO_SALES\nAS CALL PRODUCTION.PUBLIC.SP_CHECK_TEST_INCREMENTLOAD(\n'DEVELOPMENT.SALES.ODOO_SALES',\n'PRODUCTION.SALES.ODOO_SALES',\n'ID',\n'POS_ORDER_LINE_ID',\n'PRODUCTION.SALES.SP_INCREMENTLOAD_ODOO_SALES'\n);\n\nCREATE OR REPLACE TASK DEVELOPMENT.SALES.RUN_SP_CHECK_INCREMENTLOAD_ODOO_SALES\nWAREHOUSE='DEV_WH'\nUSER_TASK_TIMEOUT_MS = 1200000\nCOMMENT = 'THIS TASK IS MEANT TO RUN QUALITY CHECKS AND THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK'\nAFTER DEVELOPMENT.SALES.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_SALES\nAS CALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n'DEVELOPMENT.SALES.ODOO_SALES',\n'PRODUCTION.SALES.ODOO_SALES',\n'ID',\n'POS_ORDER_LINE_ID',\n'PRODUCTION.SALES.SP_INCREMENTLOAD_ODOO_SALES'\n);\n\nCREATE OR REPLACE TASK DEVELOPMENT.CLIENT.RUN_SP_INCREMENTLOAD_ODOO_CUSTOMERS\nWAREHOUSE='DEV_WH'\nSCHEDULE = 'USING CRON 59 0 * * * Africa/Maputo'\nUSER_TASK_TIMEOUT_MS = 1200000\nSUSPEND_TASK_AFTER_NUM_FAILURES = 3\nCOMMENT = 'THIS TASK IS MEANT TO RUN THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK AND A MAXIMUM OF 3 FAILURES'\nAS CALL DEVELOPMENT.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS();\n\nCREATE OR REPLACE TASK DEVELOPMENT.CLIENT.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_CUSTOMERS\nWAREHOUSE='DEV_WH'\nUSER_TASK_TIMEOUT_MS = 1200000\nCOMMENT = 'THIS TASK IS MEANT TO RUN QUALITY CHECKS AND THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK AND A MAXIMUM OF 3 FAILURES'\nAFTER DEVELOPMENT.CLIENT.RUN_SP_INCREMENTLOAD_ODOO_CUSTOMERS\nAS CALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n'DEVELOPMENT.CLIENT.ODOO_CUSTOMERS',\n'PRODUCTION.CLIENT.ODOO_CUSTOMERS',\n'ID',\n'USER_ID',\n'PRODUCTION.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS'\n);\n\nCREATE OR REPLACE TASK DEVELOPMENT.CLIENT.RUN_SP_CHECK_INCREMENTLOAD_ODOO_CUSTOMERS\nWAREHOUSE='DEV_WH'\nUSER_TASK_TIMEOUT_MS = 1200000\nCOMMENT = 'THIS TASK IS MEANT TO RUN QUALITY CHECKS AND THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK AND A MAXIMUM OF 3 FAILURES'\nAFTER DEVELOPMENT.CLIENT.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_CUSTOMERS\nAS CALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n'DEVELOPMENT.CLIENT.ODOO_CUSTOMERS',\n'PRODUCTION.CLIENT.ODOO_CUSTOMERS',\n'ID',\n'USER_ID',\n'PRODUCTION.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS'\n);\n\n\nCREATE OR REPLACE TASK LOGISTICS.RUN_SP_INCREMENTLOAD_ODOO_INVENTORY\nWAREHOUSE='DEV_WH'\nSCHEDULE = 'USING CRON 59 0 * * * Africa/Maputo'\nUSER_TASK_TIMEOUT_MS = 1200000\nSUSPEND_TASK_AFTER_NUM_FAILURES = 3\nCOMMENT = 'THIS TASK IS MEANT TO RUN THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK AND A MAXIMUM OF 3 FAILURES'\nAS CALL DEVELOPMENT.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY();\n\nCREATE OR REPLACE TASK DEVELOPMENT.LOGISTICS.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_INVENTORY\nWAREHOUSE='DEV_WH'\nUSER_TASK_TIMEOUT_MS = 1200000\nCOMMENT = 'THIS TASK IS MEANT TO RUN QUALITY CHECKS AND THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK AND A MAXIMUM OF 3 FAILURES'\nAFTER DEVELOPMENT.LOGISTICS.RUN_SP_INCREMENTLOAD_ODOO_INVENTORY\nAS CALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n'DEVELOPMENT.LOGISTICS.ODOO_INVENTORY',\n'PRODUCTION.LOGISTICS.ODOO_INVENTORY',\n'ID',\n'STOCK_QUANT_ID',\n'PRODUCTION.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY'\n);\n\nCREATE OR REPLACE TASK DEVELOPMENT.LOGISTICS.RUN_SP_CHECK_INCREMENTLOAD_ODOO_INVENTORY\nWAREHOUSE='DEV_WH'\nUSER_TASK_TIMEOUT_MS = 1200000\nCOMMENT = 'THIS TASK IS MEANT TO RUN QUALITY CHECKS AND THE STORED PROCEDURE DAILY WITH A MAXIMUM TIME TO RUN OF 20 MINS FOR ANY TASK AND A MAXIMUM OF 3 FAILURES'\nAFTER DEVELOPMENT.LOGISTICS.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_INVENTORY\nAS CALL PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n'DEVELOPMENT.LOGISTICS.ODOO_INVENTORY',\n'PRODUCTION.LOGISTICS.ODOO_INVENTORY',\n'ID',\n'STOCK_QUANT_ID',\n'PRODUCTION.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY'\n);\n\nALTER TASK IF EXISTS DEVELOPMENT.SALES.RUN_SP_INCREMENTLOAD_ODOO_SALES SET SCHEDULE = 'USING CRON 59 * * * * Africa/Maputo';\nALTER TASK IF EXISTS DEVELOPMENT.CLIENT.RUN_SP_INCREMENTLOAD_ODOO_CUSTOMERS SET SCHEDULE = 'USING CRON 59 * * * * Africa/Maputo' ;\nALTER TASK IF EXISTS DEVELOPMENT.LOGISTICS.RUN_SP_INCREMENTLOAD_ODOO_INVENTORY SET SCHEDULE = 'USING CRON 59 * * * * Africa/Maputo';\n\nALTER TASK IF EXISTS DEVELOPMENT.SALES.RUN_SP_INCREMENTLOAD_ODOO_SALES SET TIMEZONE = 'Africa/Maputo';\nALTER TASK IF EXISTS DEVELOPMENT.CLIENT.RUN_SP_INCREMENTLOAD_ODOO_CUSTOMERS SET TIMEZONE = 'Africa/Maputo';\nALTER TASK IF EXISTS DEVELOPMENT.LOGISTICS.RUN_SP_INCREMENTLOAD_ODOO_INVENTORY SET TIMEZONE = 'Africa/Maputo';\n\nALTER TASK IF EXISTS SALES.RUN_SP_INCREMENTLOAD_ODOO_SALES RESUME;\nALTER TASK IF EXISTS SALES.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_SALES RESUME;\nALTER TASK IF EXISTS SALES.RUN_SP_CHECK_INCREMENTLOAD_ODOO_SALES RESUME;\nALTER TASK IF EXISTS CLIENT.RUN_SP_INCREMENTLOAD_ODOO_CUSTOMERS RESUME;\nALTER TASK IF EXISTS CLIENT.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_CUSTOMERS RESUME;\nALTER TASK IF EXISTS CLIENT.RUN_SP_CHECK_INCREMENTLOAD_ODOO_CUSTOMERS RESUME;\nALTER TASK IF EXISTS LOGISTICS.RUN_SP_INCREMENTLOAD_ODOO_INVENTORY RESUME;\nALTER TASK IF EXISTS LOGISTICS.RUN_SP_CHECK_TEST_INCREMENTLOAD_ODOO_INVENTORY RESUME;\nALTER TASK IF EXISTS LOGISTICS.RUN_SP_CHECK_INCREMENTLOAD_ODOO_INVENTORY RESUME;\n\n\n\n",
  "Parameters": [],
  "Charts": [],
  "FileSystemSafeName": "Worksheet.oaf.ODOO SALES PIPELINE.6FixtZX6sL.json",
  "_CreatedWith": "Snowflake Snowsight Extensions",
  "_CreatedVersion": "2023.2.8.0",
  "AccountName": "oaf",
  "AccountFullName": "oaf.west-europe.azure",
  "AccountUrl": "https://oaf.west-europe.azure.snowflakecomputing.com",
  "OrganizationID": "320344210810",
  "Region": "west-europe.azure"
}