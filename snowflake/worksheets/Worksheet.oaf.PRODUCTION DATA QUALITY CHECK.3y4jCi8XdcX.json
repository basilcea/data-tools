{
  "FolderID": "",
  "FolderName": "",
  "OwnerUserID": "197064206853",
  "OwnerUserName": "BASILOGBONNA",
  "Version": 141,
  "URL": "/west-europe.azure/oaf/w3y4jCi8XdcX#query",
  "WorksheetID": "3y4jCi8XdcX",
  "WorksheetName": "PRODUCTION DATA QUALITY CHECK",
  "StartedUtc": "2023-02-16T15:31:50.1769649Z",
  "EndedUtc": "2023-02-16T15:31:50.4024146Z",
  "ModifiedUtc": "2023-02-16T15:31:50.59937Z",
  "Role": "DATAENGINEER",
  "Warehouse": "DEV_WH",
  "Database": "DEVELOPMENT",
  "Schema": "SALES",
  "Query": "/* \nTHIS IS A TEMPLATE FOR QUALITY CHECKS FOR MOVING DATA FROM DEVELOPMENT TO PRODUCTION.\nIN THIS TEMPLATE FOUR QUALITY CHECKS ARE MADE\n1. ENSURE NO ROW WITH NULL ID ARE PASSED TO PRODUCTION\n2. ENSURE DATA IS NOT DELETED MANUALLY FROM PRODUCTION BUT RATHER MARKED AS IS_DELETED\n3. ENSURE UNIQUNESS OF ROWS PASSED TO PRODUCTION\n\nINPUT PARAMETERS:\nVARIABLES PASSED WHEN STORED PROCEDURES ARE CALLED THROUGH CREATE TASK. THEY INCLUDE\n    DEVELOPMENT_DATASET: THE FULL NAME <DATABASE.SCHEMA.NAME> OF THE TABLE WHERE THE DEVELOPMENT DATA IS FOUND\n    PRODUCTION_DATASET: THE FULL NAME <DATABASE.SCHEMA.NAME> OF THE TABLE WHERE THE PRODUCTION DATA IS TO BE WRITTEN. TABLE MUST ALREADY BE CREATED.\n    PRIMARY_IDENTIFIER: NORMALLY THE ID COLUMN IN CASE OF AUTO_INCREMENT\n    UNIQUE_IDENTIFIER: ANY OTHER COLUMN OTHER THAN THE ID COLUMN THAT UNIQUELY IDENTIFIES EACH ROW\n    PRODUCTION_STORED_PROCEDURE; THE FULL NAME <DATABASE.SCHEMA.NAME> OF THE STORED PROCEDURE (ALREADY     CREATED) FOR COPYING DATA FROM DEVELOPMENT TO PRODUCTION\n    TASKNAME: THE NAME OF THE TASK CREATED USING CREATE TASK\n*/\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.PUBLIC.SP_CHECK_INCREMENTLOAD(\n    DEVELOPMENT_DATASET varchar , \n    PRODUCTION_DATASET varchar , \n    PRIMARY_IDENTIFIER varchar, \n    UNIQUE_IDENTIFIER varchar , \n    PRODUCTION_STORED_PROCEDURE varchar,\n    IS_TEST BOOLEAN)\nRETURNS VARCHAR\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDECLARE PREVIOUS_COUNT INTEGER DEFAULT 0;\nRETURN_VAL VARCHAR; \nROW_COUNT1 INTEGER DEFAULT 0;\nUPSERT_COUNT INTEGER DEFAULT 0;\nROW_COUNT2 INTEGER DEFAULT 0;\nQUALITY_CHECK_EXCEPTION EXCEPTION (-20023, ''); \nERRM varchar;\nBEGIN \n\n/*1.ENSURE NO ROW WITH NULL ID ARE PASSED TO PRODUCTION\n    ROW_COUNT1: COUNT OF ROWS WITH NULL ID\n    LOGIC: IF THERE EXISTS A ROW WITH NULL ID THEN RAISE QUALITY CHECK EXCEPTION AND STOP THE FLOW\n*/    \nSELECT COUNT(identifier(:UNIQUE_IDENTIFIER)) INTO :ROW_COUNT1 FROM identifier(:DEVELOPMENT_DATASET) WHERE identifier(:PRIMARY_IDENTIFIER) IS NULL; \n      IF (:ROW_COUNT1 > 0) THEN\n          --Another way to assign values to declared variables\n          ERRM := 'NULL ' || :PRIMARY_IDENTIFIER || ' EXISTS IN ' || :DEVELOPMENT_DATASET ;\n          RAISE QUALITY_CHECK_EXCEPTION;\n      END IF;\n      \n/*2.ENSURE DATA IS NOT DELETED MANUALLY FROM PRODUCTION BUT RATHER MARKED AS IS_DELETED\n    PREVIOUS_COUNT: COUNT OF ROWS IN THE COLUMN USING THE PRIMARY IDENTIFIER COLUMN (USUALLY ID) FROM                             PRODUCTION TABLE\n    RETURN_VAL: THE RETURN VALUE FOR THE MOST RECENT PREVIOUS RUN OF THIS SPECIFIC TASK (DIFFERENT FROM TASK                 PREDECESSOR) GOTTEN.BY QUERYING THE TASK HISTORY USING THE TASK NAME. THIS RETURN VALUE IS SAVED AS COUNT OF ROWS IN THE TABLE FROM THE PREVIOUS TASK RUN\n    LOGIC: IF THE PREVIOUS_COUNT < RETURN_VAL, THEN DATA HAS BEEN MANUALLY DELETED, RAISE EXCEPTION AND STOP THE FLOW\n   \n*/\n      SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :PREVIOUS_COUNT FROM \n      identifier(:PRODUCTION_DATASET);\n      \n      SELECT TOP 1 identifier(:PRIMARY_IDENTIFIER) INTO :RETURN_VAL FROM \n      identifier(:PRODUCTION_DATASET) ORDER BY identifier(:PRIMARY_IDENTIFIER) DESC;\n\n      IF( :PREVIOUS_COUNT < :RETURN_VAL::INTEGER ) THEN\n          ERRM := 'DATA MANUALLY DELETED FROM '|| :PRODUCTION_DATASET;\n          RAISE QUALITY_CHECK_EXCEPTION;\n      END IF;\n      \n  BEGIN TRANSACTION;\n/*3.ENSURE DATA COMPLETENESS (i.e  DATA IN PRODUCTION IS MORE OR EQUAL TO THAT IN DEVELOPMENT)\n    PREVIOUS_COUNT: COUNT OF ROWS IN THE COLUMN USING THE PRIMARY IDENTIFIER COLUMN (USUALLY ID) FROM                             PRODUCTION TABLE BEFORE CALLING THE STORED PROCEDURE.\n    ROW_COUNT1: THE TOTAL NUMBER OF NEW ROWS INSERTED OR UPDATED FROM THE ACTION OF CALLING THE PRODUCTION                   STORED PROCEDURE.\n    ROW_COUNT2: THE TOTAL NUMBER OF ROWS IN DEVELOPMENT TABLE;\n    LOGIC: THE PREVIOUS_NUMBER OF ROWS BEFORE CALLING STORED PROCEDURE + ROWS INSERTED AFTER CALLING THE                PROCEDURE SHOULD ALWAYS BE GREATER (GIVEN IS_DELETED IF FOR SOME REASON DEVELOPMENT IS WIPED CLEAN) OR EQUAL TO NUMBER OF ROWS IN DEVELOPMENT. IF NOT ROLLBACK THE DATA TRANSFER TRANSACTION, THEN RAISE AN EXCEPTION AND STOP THE FLOW.\n*/\n   \n        CALL identifier(:PRODUCTION_STORED_PROCEDURE)() INTO :ROW_COUNT1;\n  \n        SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :ROW_COUNT2 FROM \n        identifier(:DEVELOPMENT_DATASET);\n        IF((:PREVIOUS_COUNT + :ROW_COUNT1) < :ROW_COUNT2)   \n            THEN \n            ERRM := 'INCOMPLETE DATA TRANSFER FROM '|| :DEVELOPMENT_DATASET || 'TO '|| :PRODUCTION_DATASET;\n            ROLLBACK;\n      // Another way to assign values to declared variables\n            RAISE QUALITY_CHECK_EXCEPTION;\n        END IF; \n        \n     \n      \n\n/*4.ENSURE UNIQUNESS OF ROWS PASSED TO PRODUCTION\n    PREVIOUS_COUNT: COUNT OF ROWS IN THE COLUMN USING THE PRIMARY IDENTIFIER COLUMN (USUALLY ID) FROM                             PRODUCTION TABLE AFTER CALLING THE STORED PROCEDURE\n    ROW_COUNT1: THE TOTAL NUMBER OF ROWS WITH IS_DELETED FLAG IN PRODUCTION_TABLE.TWO ROWS CAN HAVE THE SAME UNIQUE IDENTIFIER ONLY IF ONE ROWS HAS IS_DELETED FLAG\n    ROW_COUNT2: THE TOTAL NUMBER OF ROWS OF DISTINCT UNIQUE IDENTIFIERS IN PRODUCTION TABLE;\n    LOGIC: IF TOTAL NUMBER OF ROWS OF DISTINCT UNIQUE IDENTIFIERS IS LESS THAN TOTAL NUMBER OF ROWS - ROWS WITH IS_DELETED FLAG THEN THERE ARE ROWS WITH NON UNIQUE DATA\n*/\n        SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :ROW_COUNT1 FROM identifier(:PRODUCTION_DATASET) \n        WHERE IS_DELETED = TRUE;\n        SELECT COUNT(DISTINCT identifier(:UNIQUE_IDENTIFIER)) INTO :ROW_COUNT2 FROM \n        identifier(:PRODUCTION_DATASET);\n        SELECT COUNT(identifier(:PRIMARY_IDENTIFIER)) INTO :PREVIOUS_COUNT FROM  \n        identifier(:PRODUCTION_DATASET);\n\n        IF (:ROW_COUNT2 < (:PREVIOUS_COUNT - :ROW_COUNT1)) THEN\n          ERRM := 'DATA IN ' || :PRODUCTION_DATASET ||' NOT UNIQUE';\n          ROLLBACK;\n          RAISE QUALITY_CHECK_EXCEPTION;\n        END IF;\n        -- Convert previous count to varchar and set it to return value shown in tasks\n        RETURN_VAL := :UPSERT_COUNT::varchar || '; 0';\n        CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\n    COMMIT;\n    \n    -- Handle exceptions\n      \n    EXCEPTION\n    \n    WHEN QUALITY_CHECK_EXCEPTION THEN\n       IF(:IS_TEST = TRUE) \n       THEN\n        RETURN object_construct('ERROR TYPE', 'QUALITY_CHECK_EXCEPTION',\n                            'SQLCODE', sqlcode,\n                            'SQLERRM', :ERRM,\n                            'SQLSTATE', sqlstate);\n        ELSE \n          CALL SYSTEM$SET_RETURN_VALUE(:ERRM);\n           RAISE;\n       END IF;\n                            \n  -- return infor if no exception.\n    RETURN 'ALL DATA QUALITY CHECKS PASSED AND DATA SUCCESSFULLY TRANSFERRED FROM' || :DEVELOPMENT_DATASET || ' TO ' || :PRODUCTION_DATASET ;\n \nEND;",
  "Parameters": [],
  "Charts": [],
  "FileSystemSafeName": "Worksheet.oaf.PRODUCTION DATA QUALITY CHECK.3y4jCi8XdcX.json",
  "_CreatedWith": "Snowflake Snowsight Extensions",
  "_CreatedVersion": "2023.2.8.0",
  "AccountName": "oaf",
  "AccountFullName": "oaf.west-europe.azure",
  "AccountUrl": "https://oaf.west-europe.azure.snowflakecomputing.com",
  "OrganizationID": "320344210810",
  "Region": "west-europe.azure"
}