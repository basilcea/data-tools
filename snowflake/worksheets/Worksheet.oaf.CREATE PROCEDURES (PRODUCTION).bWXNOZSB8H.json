{
  "FolderID": "",
  "FolderName": "",
  "OwnerUserID": "197064206853",
  "OwnerUserName": "BASILOGBONNA",
  "Version": 187,
  "URL": "/west-europe.azure/oaf/wbWXNOZSB8H#query",
  "WorksheetID": "bWXNOZSB8H",
  "WorksheetName": "CREATE PROCEDURES (PRODUCTION)",
  "LocalPath": "/Users/mrcea/Desktop/oaf/data-tools/snowflake/worksheets/Worksheet.oaf.CREATE PROCEDURES (PRODUCTION).bWXNOZSB8H.json",
  "StartedUtc": "2023-03-14T10:00:59.169915Z",
  "EndedUtc": "2023-03-14T10:00:59.4145748Z",
  "ModifiedUtc": "2023-03-14T11:48:15.980649Z",
  "Role": "DATAENGINEER",
  "Warehouse": "ETL_WH",
  "Database": "PRODUCTION",
  "Schema": "PUBLIC",
  "Query": "/*\n USE UPDATE INSERT INSTEAD OF MERGE BECAUSE SNOWFLAKE SEQUENCES HAVE GAPS THAT CAN BREAK THE ID NUMBERING AND MAKE IT LOOK \n LIKE THE DATA HAS BEEN MANUALLY DELETED FROM PROD,THUS BREAKING THE NEXT QUALITY CHECK FOR DATA MANUALLY DELETED.\n*/\nCREATE OR REPLACE PROCEDURE PRODUCTION.SALES.SP_INCREMENTLOAD_ODOO_SALES(\n)\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDECLARE UPDATE_COUNT INTEGER DEFAULT 0;  PREVIOUS_COUNT INTEGER DEFAULT 0;\nBEGIN\n  // TO consume a single stream in multiple dml expression use explicit transactions\n    BEGIN TRANSACTION;\n\n    UPDATE PRODUCTION.SALES.ODOO_SALES AS T\n    SET\n        T.COMPANY_ID = S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_CREATED_AT = S.DB_CREATED_AT,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.DUKA_NAME= S.DUKA_NAME,\n        T.MARGIN=  S.MARGIN,\n        T.CUSTOMER_ID = S.CUSTOMER_ID,\n        T.POS_ORDER_LINE_ID=  S.POS_ORDER_LINE_ID,\n        T.PRICE=  S.PRICE,\n        T.PRICE_LIST= S.PRICE_LIST,\n        T.PRICE_LIST_ID= S.PRICE_LIST_ID,\n        T.PRODUCT_CATEGORY = S.PRODUCT_CATEGORY,\n        T.PRODUCT_CATEGORY_ID=  S.PRODUCT_CATEGORY_ID,\n        T.PRODUCT_CODE=  S.PRODUCT_CODE,\n        T.PRODUCT_ID=  S.PRODUCT_ID,\n        T.PRODUCT_NAME=  S.PRODUCT_NAME,\n        T.QUANTITY=  S.QUANTITY,\n        T.SHOP_KEEPER= S.SHOP_KEEPER,\n        T.IS_DELETED = S.IS_DELETED,\n        T.PAYMENT_METHOD_ID = S.PAYMENT_METHOD_ID,\n        T.PAYMENT_METHOD_NAME = S.PAYMENT_METHOD_NAME\n    FROM DEVELOPMENT.SALES.ODOO_SALES_STREAM AS S\n    WHERE T.ID = S.ID\n    AND S.METADATA$ACTION='INSERT' \n    AND S.METADATA$ISUPDATE='TRUE';\n\n        UPDATE_COUNT := :SQLROWCOUNT;\n\n     INSERT INTO PRODUCTION.SALES.ODOO_SALES ( ID, COMPANY_ID,COUNTRY,CREATED_AT,CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,\nCUSTOMER_ID,DUKA_NAME,MARGIN,POS_ORDER_LINE_ID,PRICE,PRICE_LIST,PRICE_LIST_ID,PRODUCT_CATEGORY,\nPRODUCT_CATEGORY_ID,PRODUCT_CODE,PRODUCT_ID,PRODUCT_NAME,QUANTITY,SHOP_KEEPER,IS_DELETED, PAYMENT_METHOD_ID, PAYMENT_METHOD_NAME)\n\n    SELECT IFNULL((SELECT MAX(ID) FROM PRODUCTION.SALES.ODOO_SALES),0) +ROW_NUMBER() OVER (ORDER BY S.ID),S.COMPANY_ID,S.COUNTRY,S.CREATED_AT,S.CREATED_BY, S.DB_CREATED_AT,S.DB_UPDATED_AT,S.CUSTOMER_ID,\nS.DUKA_NAME,S.MARGIN,S.POS_ORDER_LINE_ID,S.PRICE,S.PRICE_LIST,S.PRICE_LIST_ID,S.PRODUCT_CATEGORY,S.PRODUCT_CATEGORY_ID,S.PRODUCT_CODE,S.PRODUCT_ID,S.PRODUCT_NAME,S.QUANTITY,S.SHOP_KEEPER,S.IS_DELETED, S.PAYMENT_METHOD_ID, S.PAYMENT_METHOD_NAME\n    FROM DEVELOPMENT.SALES.ODOO_SALES_STREAM AS S\n    WHERE S.ID NOT IN (SELECT ID FROM PRODUCTION.SALES.ODOO_SALES )\n    AND S.METADATA$ACTION='INSERT' \n    AND S.METADATA$ISUPDATE='FALSE';\n\nCOMMIT;\n    RETURN :SQLROWCOUNT + :UPDATE_COUNT;\nEND;\n\n/*\n USING MERGE FOR TEST BECAUSE TEMPORARY TABLES AUTOMATICALLY DELETES ITSELF AFTER EACH SECTION AND AS SUCH THE ISSUES WITH SEQUENCES HAVING GAPS THAT PROMPTED USE OF UPDATE INSERT WOULD NOT BE THERE. AVIODED USING THE STREAM IN TESTING BECAUSE IF THE STREAM IS CONSUMED IN TEST THE NEXT TASK WHICH IS THE PROD TASK WILL BE SKIPPED DUE TO THE AFTER CLAUSE IN THE TASK DAG.\n \n*/\nCREATE OR REPLACE PROCEDURE PRODUCTION.SALES.SP_INCREMENTLOAD_ODOO_SALES_TEST(\n)\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nBEGIN\nMERGE INTO TEMP_PROD T \nUSING TEMP_DEV S\nON T.ID = S.ID\nWHEN MATCHED THEN UPDATE \n    SET\n        T.COMPANY_ID = S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.DUKA_NAME= S.DUKA_NAME,\n        T.MARGIN=  S.MARGIN,\n        T.CUSTOMER_ID = S.CUSTOMER_ID,\n        T.POS_ORDER_LINE_ID=  S.POS_ORDER_LINE_ID,\n        T.PRICE=  S.PRICE,\n        T.PRICE_LIST= S.PRICE_LIST,\n        T.PRICE_LIST_ID= S.PRICE_LIST_ID,\n        T.PRODUCT_CATEGORY = S.PRODUCT_CATEGORY,\n        T.PRODUCT_CATEGORY_ID=  S.PRODUCT_CATEGORY_ID,\n        T.PRODUCT_CODE=  S.PRODUCT_CODE,\n        T.PRODUCT_ID=  S.PRODUCT_ID,\n        T.PRODUCT_NAME=  S.PRODUCT_NAME,\n        T.QUANTITY=  S.QUANTITY,\n        T.SHOP_KEEPER= S.SHOP_KEEPER,\n        T.IS_DELETED = S.IS_DELETED\n        \nWHEN NOT MATCHED THEN INSERT ( COMPANY_ID,COUNTRY,CREATED_AT,CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,\nCUSTOMER_ID,DUKA_NAME,MARGIN,POS_ORDER_LINE_ID,PRICE,PRICE_LIST,PRICE_LIST_ID,PRODUCT_CATEGORY,\nPRODUCT_CATEGORY_ID,PRODUCT_CODE,PRODUCT_ID,PRODUCT_NAME,QUANTITY,SHOP_KEEPER,IS_DELETED)\nVALUES (S.COMPANY_ID,S.COUNTRY,S.CREATED_AT,S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.CUSTOMER_ID,\nS.DUKA_NAME,S.MARGIN,S.POS_ORDER_LINE_ID,S.PRICE,S.PRICE_LIST,S.PRICE_LIST_ID,S.PRODUCT_CATEGORY,S.PRODUCT_CATEGORY_ID,S.PRODUCT_CODE,S.PRODUCT_ID,S.PRODUCT_NAME,S.QUANTITY,S.SHOP_KEEPER,S.IS_DELETED);\nRETURN :SQLROWCOUNT ;\nEND;\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS()\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDECLARE UPDATE_COUNT INTEGER DEFAULT 0;\nBEGIN\nBEGIN TRANSACTION;\n UPDATE PRODUCTION.CLIENT.ODOO_CUSTOMERS AS T\n    SET\n        T.COMPANY_ID=S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.PHONE_NUMBER = S.PHONE_NUMBER,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.DB_CREATED_AT = S.DB_CREATED_AT,\n        T.NAME = S.NAME,\n        T.USER_ID = S.USER_ID,\n        T.IS_DELETED = S.IS_DELETED\n    FROM DEVELOPMENT.CLIENT.ODOO_CUSTOMERS_STREAM AS S\n    WHERE T.ID = S.ID\n    AND S.METADATA$ACTION='INSERT' \n    AND S.METADATA$ISUPDATE='TRUE';\n    \n    UPDATE_COUNT := :SQLROWCOUNT;\n    \n    INSERT INTO PRODUCTION.CLIENT.ODOO_CUSTOMERS (\n        ID,COMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,NAME,USER_ID, PHONE_NUMBER, IS_DELETED)\n   SELECT IFNULL((SELECT MAX(ID) FROM PRODUCTION.CLIENT.ODOO_CUSTOMERS),0) +ROW_NUMBER() OVER (ORDER BY S.ID), S.COMPANY_ID,S.COUNTRY,S.CREATED_AT,S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.NAME, S.USER_ID, PHONE_NUMBER, IS_DELETED\n FROM DEVELOPMENT.CLIENT.ODOO_CUSTOMERS_STREAM AS S\n WHERE S.ID NOT IN (SELECT ID FROM PRODUCTION.CLIENT.ODOO_CUSTOMERS )\n    AND S.METADATA$ACTION='INSERT' \n    AND S.METADATA$ISUPDATE='FALSE';\n  COMMIT;  \nRETURN :SQLROWCOUNT + :UPDATE_COUNT;\nEND;\n\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS_TEST()\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nBEGIN\nMERGE INTO TEMP_PROD T \nUSING TEMP_DEV S\nON T.ID = S.ID\nWHEN MATCHED THEN\n UPDATE \n    SET\n        T.COMPANY_ID = S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.PHONE_NUMBER = S.PHONE_NUMBER,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.NAME = S.NAME,\n        T.USER_ID = S.USER_ID,\n        T.IS_DELETED = S.IS_DELETED\nWHEN NOT MATCHED THEN INSERT (\nCOMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,NAME,USER_ID, PHONE_NUMBER, IS_DELETED)\nVALUES(S.COMPANY_ID,S.COUNTRY,S.CREATED_AT,S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.NAME, S.USER_ID, S.PHONE_NUMBER, S.IS_DELETED); \n\nRETURN :SQLROWCOUNT;\nEND;\n\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY()\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDECLARE UPDATE_COUNT INTEGER DEFAULT 0;\nBEGIN\nBEGIN TRANSACTION;\nUPDATE PRODUCTION.LOGISTICS.ODOO_INVENTORY AS T\nSET  \n      T.COMPANY_ID = S.COMPANY_ID,\n      T.COUNTRY = S.COUNTRY,\n      T.CREATED_AT = S.CREATED_AT,\n      T.CREATED_BY = S.CREATED_BY,\n      T.DB_UPDATED_AT = S.DB_UPDATED_AT,\n      T.DB_CREATED_AT = S.DB_CREATED_AT,\n      T.STOCK_QUANT_ID = S.STOCK_QUANT_ID,\n      T.LOCATION_ID  = S.LOCATION_ID,\n      T.LOCATION_NAME = S.LOCATION_NAME,\n      T.PRODUCT_ID = S.PRODUCT_ID,\n      T.PRODUCT_NAME = S.PRODUCT_NAME,\n      T.QUANTITY = S.QUANTITY,\n      T.AVAILABLE_QUANTITY = S.AVAILABLE_QUANTITY,\n      T.VALUE = S.VALUE,\n      T.IS_DELETED = S.IS_DELETED\n    FROM DEVELOPMENT.LOGISTICS.ODOO_INVENTORY_STREAM AS S\n    WHERE T.ID = S.ID\n    AND S.METADATA$ACTION='INSERT' \n    AND S.METADATA$ISUPDATE='TRUE';\n    \n    UPDATE_COUNT := :SQLROWCOUNT;\n\n    INSERT INTO PRODUCTION.LOGISTICS.ODOO_INVENTORY (\n        ID,STOCK_QUANT_ID, LOCATION_ID, LOCATION_NAME, PRODUCT_ID, PRODUCT_NAME, QUANTITY, \n        COMPANY_ID, COUNTRY, CREATED_AT, CREATED_BY, AVAILABLE_QUANTITY,VALUE, IS_DELETED )\n    SELECT IFNULL((SELECT MAX(ID) FROM PRODUCTION.LOGISTICS.ODOO_INVENTORY),0) +ROW_NUMBER() OVER (ORDER BY S.ID), S.STOCK_QUANT_ID, S.LOCATION_ID, S.LOCATION_NAME, S.PRODUCT_ID, S.PRODUCT_NAME, S.QUANTITY, S.COMPANY_ID, S.COUNTRY, S.CREATED_AT, S.CREATED_BY, S.AVAILABLE_QUANTITY, S.VALUE, S.IS_DELETED FROM DEVELOPMENT.LOGISTICS.ODOO_INVENTORY_STREAM AS S\n WHERE S.ID NOT IN (SELECT ID FROM PRODUCTION.LOGISTICS.ODOO_INVENTORY )\n    AND S.METADATA$ACTION='INSERT' \n    AND S.METADATA$ISUPDATE='FALSE';\nCOMMIT;    \nRETURN :SQLROWCOUNT + :UPDATE_COUNT;\nEND;\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY_TEST()\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nBEGIN\nMERGE INTO TEMP_PROD AS T \nUSING TEMP_DEV S\nON T.ID = S.ID\nWHEN MATCHED THEN\nUPDATE\nSET  \n      T.COMPANY_ID = S.COMPANY_ID,\n      T.COUNTRY = S.COUNTRY,\n      T.CREATED_AT = S.CREATED_AT,\n      T.CREATED_BY = S.CREATED_BY,\n      T.DB_UPDATED_AT = S.DB_UPDATED_AT,\n      T.STOCK_QUANT_ID = S.STOCK_QUANT_ID,\n      T.LOCATION_ID  = S.LOCATION_ID,\n      T.LOCATION_NAME = S.LOCATION_NAME,\n      T.PRODUCT_ID = S.PRODUCT_ID,\n      T.PRODUCT_NAME = S.PRODUCT_NAME,\n      T.QUANTITY = S.QUANTITY,\n      T.AVAILABLE_QUANTITY = S.AVAILABLE_QUANTITY,\n      T.VALUE = S.VALUE,\n      T.IS_DELETED = S.IS_DELETED\n      \n    WHEN NOT MATCHED THEN INSERT (\n        STOCK_QUANT_ID, LOCATION_ID, LOCATION_NAME, PRODUCT_ID, PRODUCT_NAME, QUANTITY, \n        COMPANY_ID, COUNTRY, CREATED_AT, CREATED_BY, AVAILABLE_QUANTITY,VALUE, IS_DELETED )\n        VALUES( S.STOCK_QUANT_ID, S.LOCATION_ID, S.LOCATION_NAME, S.PRODUCT_ID, S.PRODUCT_NAME, S.QUANTITY, S.COMPANY_ID, S.COUNTRY, S.CREATED_AT, S.CREATED_BY, S.AVAILABLE_QUANTITY, S.VALUE, S.IS_DELETED); \nRETURN :SQLROWCOUNT ;\nEND;\n\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.CLIENT.SP_INCREMENTLOAD_KOBO_KENYA_FARMER_ENROLLMENT_LR23()\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDECLARE UPDATE_COUNT INTEGER DEFAULT 0;\nBEGIN\nBEGIN TRANSACTION;\nUPDATE PRODUCTION.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS AS T\nSET\n    T.KOBO_ID =  S.KOBO_ID,\n    T.SUBMISSION_ID =  S.SUBMISSION_ID,\n    T.REGION =  S.REGION,\n    T.NURSERY =  S.NURSERY,\n    T.DUKA =  S.DUKA,\n    T.USERNAME =  S.USERNAME,\n    T.SITE =  S.SITE,\n    T.OTHER_SITE =  S.OTHER_SITE,\n    T.FARMER_NAME =  S.FARMER_NAME,\n    T.FARMER_ID =  S.FARMER_ID,\n    T.FARMER_PHONE_NUMBER =  S.FARMER_PHONE_NUMBER,\n    T.TUPANDE_FARMER =  S.TUPANDE_FARMER,\n    T.START_TIME = S.START_TIME,\n    T.END_TIME = S.END_TIME,\n    T.SUBMISSION_TIME = S.SUBMISSION_TIME,\n    T.SUBMITTED_BY =  S.SUBMITTED_BY,\n    T.YEAR =  S.YEAR,\n    T.SEASON =  S.SEASON,\n    T.COUNTRY =  S.COUNTRY,\n    T.IS_DELETED = S.IS_DELETED,\n    T.FirstSeasonID = S.FirstSeasonID,\n    T.TotalEnrolledSeasons = S.TotalEnrolledSeasons,\n    T.DimCountryID  = S.DimCountryID,\n    T.DimRegionID = S.DimRegionID ,\n    T.DimSectorID = S.DimSectorID,\n    T.DimSiteID = S.DimSiteID,\n    T.DimDistrictID = S.DimDistrictID ,\n    T.DimSeasonID = S.DimSeasonID,\n    T.DimClientID = S.DimClientID,\n    T.ENROLLMENTDATE = S.ENROLLMENTDATE,\n    T.AccountNumber =  S.AccountNumber,\n    T.DB_UPDATED_AT = S.DB_UPDATED_AT\nFROM DEVELOPMENT.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS S\nWHERE T.ID = S.ID AND (\n    IFNULL(T.KOBO_ID,'') != IFNULL(S.KOBO_ID,'')\n    OR IFNULL(T.SUBMISSION_ID,'') != IFNULL(S.SUBMISSION_ID,'')\n    OR IFNULL(T.REGION,'') != IFNULL(S.REGION,'')\n    OR IFNULL(T.NURSERY,'') != IFNULL(S.NURSERY,'')\n    OR IFNULL(T.DUKA,'') != IFNULL(S.DUKA,'''')\n    OR IFNULL(T.USERNAME,'') != IFNULL(S.USERNAME,'')\n    OR IFNULL(T.SITE,'') != IFNULL(S.SITE,'')\n    OR IFNULL(T.OTHER_SITE,'') != IFNULL(S.OTHER_SITE,'')\n    OR IFNULL(T.FARMER_NAME,'') != IFNULL(S.FARMER_NAME,'')\n    OR IFNULL(T.FARMER_ID,'') != IFNULL(S.FARMER_ID,'')\n    OR IFNULL(T.FARMER_PHONE_NUMBER,'') != IFNULL(S.FARMER_PHONE_NUMBER,'')\n    OR IFNULL(T.TUPANDE_FARMER,'') != IFNULL(S.TUPANDE_FARMER,'')\n    OR IFNULL(T.START_TIME,NULL) != IFNULL(S.START_TIME,NULL)\n    OR IFNULL(T.END_TIME,NULL) != IFNULL(S.END_TIME,NULL)\n    OR IFNULL(T.SUBMISSION_TIME,NULL) != IFNULL(S.SUBMISSION_TIME,NULL)\n    OR IFNULL(T.SUBMITTED_BY,'') != IFNULL(S.SUBMITTED_BY,'')\n    OR IFNULL(T.YEAR,'') != IFNULL(S.YEAR,'')\n    OR IFNULL(T.SEASON,'') != IFNULL(S.SEASON,'')\n    OR IFNULL(T.COUNTRY,'') != IFNULL(S.COUNTRY,'')\n    OR IFNULL(T.IS_DELETED,NULL) != IFNULL(S.IS_DELETED,NULL)\n    OR ZEROIFNULL(T.FirstSeasonID) != ZEROIFNULL(S.FirstSeasonID)\n    OR ZEROIFNULL(T.TotalEnrolledSeasons ) != ZEROIFNULL(S.TotalEnrolledSeasons)\n    OR ZEROIFNULL(T.DimCountryID ) != ZEROIFNULL(S.DimCountryID ) \n    OR ZEROIFNULL(T.DimRegionID ) != ZEROIFNULL(S.DimRegionID )\n    OR ZEROIFNULL(T.DimSectorID) != ZEROIFNULL(S.DimSectorID)\n    OR ZEROIFNULL(T.DimSiteID ) != ZEROIFNULL(S.DimSiteID ) \n    OR ZEROIFNULL(T.DimDistrictID) != ZEROIFNULL(S.DimDistrictID) \n    OR ZEROIFNULL(T.DimSeasonID) != ZEROIFNULL(S.DimSeasonID)\n    OR ZEROIFNULL(T.DimClientID) != ZEROIFNULL(S.DimClientID)\n    OR IFNULL(T.ENROLLMENTDATE,NULL) != IFNULL(S.ENROLLMENTDATE,NULL)\n    OR IFNULL(T.AccountNumber,'') != IFNULL(S.AccountNumber, '')\n    OR IFNULL(T.DB_UPDATED_AT,NULL) != IFNULL(S.DB_UPDATED_AT, NULL)\n    );\n    UPDATE_COUNT := :SQLROWCOUNT;\nINSERT INTO PRODUCTION.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS (\n     id, Kobo_id, Submission_id, region, nursery, duka, username, site, other_site, farmer_name, farmer_id, farmer_phone_number, tupande_farmer, start_time, end_time,submission_time, submitted_by,year,season,country,is_deleted,firstseasonid,totalenrolledseasons,dimcountryid,dimregionid,dimsectorid,dimsiteid,dimdistrictid,dimseasonid,dimclientid, enrollmentdate,accountnumber)\nSELECT IFNULL((SELECT MAX(ID) FROM PRODUCTION.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS),0) +ROW_NUMBER() OVER (ORDER BY S.ID),s.Kobo_id, s.Submission_id, s.region, s.nursery, s.duka, s.username, s.site, s.other_site, s.farmer_name, s.farmer_id, s.farmer_phone_number, s.tupande_farmer, s.start_time, s.end_time,s.submission_time,s.submitted_by,s.year,s.season,s.country,s.is_deleted,s.firstseasonid,s.totalenrolledseasons,s.dimcountryid,s.dimregionid,s.dimsectorid,s.dimsiteid,s.dimdistrictid,s.dimseasonid,s.dimclientid, s.enrollmentdate,s.accountnumber FROM DEVELOPMENT.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS S\nWHERE S.ID NOT IN ( SELECT ID FROM PRODUCTION.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS);\nCOMMIT;\nRETURN :UPDATE_COUNT + :SQLROWCOUNT;\nEND;\n\n\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.CLIENT.SP_INCREMENTLOAD_KOBO_KENYA_FARMER_ENROLLMENT_LR23_TEST()\nRETURNS INTEGER\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nBEGIN\nMERGE INTO TEMP_PROD AS T \nUSING TEMP_DEV S\nON T.ID = S.ID\n    WHEN MATCHED AND (\n        IFNULL(T.KOBO_ID,'') != IFNULL(S.KOBO_ID,'')\n    OR IFNULL(T.SUBMISSION_ID,'') != IFNULL(S.SUBMISSION_ID,'')\n    OR IFNULL(T.REGION,'') != IFNULL(S.REGION,'')\n    OR IFNULL(T.NURSERY,'') != IFNULL(S.NURSERY,'')\n    OR IFNULL(T.DUKA,'') != IFNULL(S.DUKA,'''')\n    OR IFNULL(T.USERNAME,'') != IFNULL(S.USERNAME,'')\n    OR IFNULL(T.SITE,'') != IFNULL(S.SITE,'')\n    OR IFNULL(T.OTHER_SITE,'') != IFNULL(S.OTHER_SITE,'')\n    OR IFNULL(T.FARMER_NAME,'') != IFNULL(S.FARMER_NAME,'')\n    OR IFNULL(T.FARMER_ID,'') != IFNULL(S.FARMER_ID,'')\n    OR IFNULL(T.FARMER_PHONE_NUMBER,'') != IFNULL(S.FARMER_PHONE_NUMBER,'')\n    OR IFNULL(T.TUPANDE_FARMER,'') != IFNULL(S.TUPANDE_FARMER,'')\n    OR IFNULL(T.START_TIME,NULL) != IFNULL(S.START_TIME,NULL)\n    OR IFNULL(T.END_TIME,NULL) != IFNULL(S.END_TIME,NULL)\n    OR IFNULL(T.SUBMISSION_TIME,NULL) != IFNULL(S.SUBMISSION_TIME,NULL)\n    OR IFNULL(T.SUBMITTED_BY,'') != IFNULL(S.SUBMITTED_BY,'')\n    OR IFNULL(T.YEAR,'') != IFNULL(S.YEAR,'')\n    OR IFNULL(T.SEASON,'') != IFNULL(S.SEASON,'')\n    OR IFNULL(T.COUNTRY,'') != IFNULL(S.COUNTRY,'')\n    OR IFNULL(T.IS_DELETED,NULL) != IFNULL(S.IS_DELETED,NULL)\n    OR ZEROIFNULL(T.FirstSeasonID) != ZEROIFNULL(S.FirstSeasonID)\n    OR ZEROIFNULL(T.TotalEnrolledSeasons ) != ZEROIFNULL(S.TotalEnrolledSeasons)\n    OR ZEROIFNULL(T.DimCountryID ) != ZEROIFNULL(S.DimCountryID ) \n    OR ZEROIFNULL(T.DimRegionID ) != ZEROIFNULL(S.DimRegionID )\n    OR ZEROIFNULL(T.DimSectorID) != ZEROIFNULL(S.DimSectorID)\n    OR ZEROIFNULL(T.DimSiteID ) != ZEROIFNULL(S.DimSiteID ) \n    OR ZEROIFNULL(T.DimDistrictID) != ZEROIFNULL(S.DimDistrictID) \n    OR ZEROIFNULL(T.DimSeasonID) != ZEROIFNULL(S.DimSeasonID)\n    OR ZEROIFNULL(T.DimClientID) != ZEROIFNULL(S.DimClientID)\n    OR IFNULL(T.ENROLLMENTDATE,NULL) != IFNULL(S.ENROLLMENTDATE,NULL)\n    OR IFNULL(T.AccountNumber,'') != IFNULL(S.AccountNumber, '')\n    )\n    \nTHEN UPDATE\n    SET\n    T.KOBO_ID =  S.KOBO_ID,\n    T.SUBMISSION_ID =  S.SUBMISSION_ID,\n    T.REGION =  S.REGION,\n    T.NURSERY =  S.NURSERY,\n    T.DUKA =  S.DUKA,\n    T.USERNAME =  S.USERNAME,\n    T.SITE =  S.SITE,\n    T.OTHER_SITE =  S.OTHER_SITE,\n    T.FARMER_NAME =  S.FARMER_NAME,\n    T.FARMER_ID =  S.FARMER_ID,\n    T.FARMER_PHONE_NUMBER =  S.FARMER_PHONE_NUMBER,\n    T.TUPANDE_FARMER =  S.TUPANDE_FARMER,\n    T.START_TIME = S.START_TIME,\n    T.END_TIME = S.END_TIME,\n    T.SUBMISSION_TIME = S.SUBMISSION_TIME,\n    T.SUBMITTED_BY =  S.SUBMITTED_BY,\n    T.YEAR =  S.YEAR,\n    T.SEASON =  S.SEASON,\n    T.COUNTRY =  S.COUNTRY,\n    T.IS_DELETED = S.IS_DELETED,\n    T.FirstSeasonID = S.FirstSeasonID,\n    T.TotalEnrolledSeasons = S.TotalEnrolledSeasons,\n    T.DimCountryID  = S.DimCountryID,\n    T.DimRegionID = S.DimRegionID ,\n    T.DimSectorID = S.DimSectorID,\n    T.DimSiteID = S.DimSiteID,\n    T.DimDistrictID = S.DimDistrictID ,\n    T.DimSeasonID = S.DimSeasonID,\n    T.DimClientID = S.DimClientID,\n    T.ENROLLMENTDATE = S.ENROLLMENTDATE,\n    T.AccountNumber =  S.AccountNumber\nWHEN NOT MATCHED\n    THEN INSERT (\n       Kobo_id, Submission_id, region, nursery, duka, username, site, other_site, farmer_name, farmer_id, farmer_phone_number, tupande_farmer, start_time, end_time,submission_time, submitted_by,year,season,country,is_deleted,firstseasonid,totalenrolledseasons,dimcountryid,dimregionid,dimsectorid,dimsiteid,dimdistrictid,dimseasonid,dimclientid, enrollmentdate,accountnumber\n        )\n        VALUES(\n            s.Kobo_id, s.Submission_id, s.region, s.nursery, s.duka, s.username, s.site, s.other_site, s.farmer_name, s.farmer_id, s.farmer_phone_number, s.tupande_farmer, s.start_time, s.end_time,s.submission_time,s.submitted_by,s.year,s.season,s.country,s.is_deleted,s.firstseasonid,s.totalenrolledseasons,s.dimcountryid,s.dimregionid,s.dimsectorid,s.dimsiteid,s.dimdistrictid,s.dimseasonid,s.dimclientid, s.enrollmentdate,s.accountnumber);\nRETURN :SQLROWCOUNT;\nEND;\n\nCREATE OR REPLACE PROCEDURE PRODUCTION.PUBLIC.SP_TRUNCATELOAD_LOAD_COMMCARE_2022()\nRETURNS VARCHAR\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDeclare table_path varchar;\ntable_nm varchar;\nc1 CURSOR FOR SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_SCHEMA||'.'||TABLE_NAME AS PATH FROM  development.information_schema.tables \nWHERE TABLE_NAME ILIKE '%COMMCARE%';\nBEGIN\n  FOR RECORD IN c1 DO\n    table_nm := RECORD.PATH;\n    table_path := 'PRODUCTION.'||:table_nm;\n    let development_path varchar := 'DEVELOPMENT.'||:table_nm;\n    CREATE OR REPLACE TABLE identifier(:table_path) AS SELECT * FROM IDENTIFIER(:development_path);\n    let tbl_schema varchar := RECORD.TABLE_SCHEMA;\n    let tbl_name varchar := RECORD.TABLE_NAME;\n    tbl_name := 'PRODUCTION.'||:tbl_schema ||'V_'|| :tbl_name;\n    CREATE OR REPLACE VIEW  IDENTIFIER (:tbl_name)\n    AS SELECT * FROM IDENTIFIER(:table_path);\n  END FOR;\nEND;   \n\n  \n",
  "Parameters": [],
  "Charts": [],
  "FileSystemSafeName": "Worksheet.oaf.CREATE PROCEDURES (PRODUCTION).bWXNOZSB8H.json",
  "_CreatedWith": "Snowflake Snowsight Extensions",
  "_CreatedVersion": "2023.2.8.0",
  "AccountName": "oaf",
  "AccountFullName": "oaf.west-europe.azure",
  "AccountUrl": "https://oaf.west-europe.azure.snowflakecomputing.com",
  "OrganizationID": "320344210810",
  "Region": "west-europe.azure"
}