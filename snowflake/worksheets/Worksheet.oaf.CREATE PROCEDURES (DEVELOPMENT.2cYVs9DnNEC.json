{
  "FolderID": "",
  "FolderName": "",
  "OwnerUserID": "197064206853",
  "OwnerUserName": "BASILOGBONNA",
  "Version": 502,
  "URL": "/west-europe.azure/oaf/w2cYVs9DnNEC#query",
  "WorksheetID": "2cYVs9DnNEC",
  "WorksheetName": "CREATE PROCEDURES (DEVELOPMENT)",
  "LocalPath": "/Users/mrcea/Desktop/oaf/data-tools/snowflake/worksheets/Worksheet.oaf.CREATE PROCEDURES (DEVELOPMENT.2cYVs9DnNEC.json",
  "StartedUtc": "2023-03-13T16:04:14.489849Z",
  "EndedUtc": "2023-03-13T16:04:14.7988532Z",
  "ModifiedUtc": "2023-03-14T09:11:13.110878Z",
  "Role": "DATAENGINEER",
  "Warehouse": "DEV_WH",
  "Database": "LANDING",
  "Schema": "",
  "Query": "CREATE OR REPLACE PROCEDURE DEVELOPMENT.SALES.SP_INCREMENTLOAD_ODOO_SALES()\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\n    DECLARE UPDATE_COUNT INTEGER DEFAULT 0; INSERT_COUNT INTEGER DEFAULT 0; DELETE_COUNT INTEGER DEFAULT 0; RETURN_VAL VARCHAR; HAS_STREAM BOOLEAN;\nBEGIN\n    \n    TRUNCATE TABLE STAGING.ODOO.SALES;\n    INSERT INTO STAGING.ODOO.SALES(\n        POS_ORDER_LINE_ID, PRODUCT_ID,PRODUCT_NAME, PRODUCT_CATEGORY_ID, PRODUCT_CATEGORY,PRICE,\n        PRODUCT_CODE,QUANTITY,COMPANY_ID, COUNTRY, CREATED_AT,CREATED_BY,DB_UPDATED_AT, PAYMENT_METHOD_ID, PAYMENT_METHOD_NAME\n    )\n    SELECT \n        POL.ID, PT.ID, PT.NAME, PC.ID, PC.NAME, PT.LIST_PRICE, PT.DEFAULT_CODE, POL.QTY, \n        POL.COMPANY_ID, RCM.NAME, POL.CREATE_DATE,\n        STAGING.ODOO.GET_NAME(RU.LOGIN), current_timestamp(),PP.PAYMENT_METHOD_ID, PPM.NAME\n     FROM LANDING.ODOO.POS_ORDER_LINE POL\n     JOIN LANDING.ODOO.PRODUCT_TEMPLATE PT ON PT.ID = POL.PRODUCT_ID \n     JOIN LANDING.ODOO.PRODUCT_CATEGORY PC ON PC.ID = PT.CATEG_ID\n     JOIN LANDING.ODOO.RES_COMPANY RCM ON RCM.ID = POL.COMPANY_ID\n     JOIN LANDING.ODOO.RES_USERS RU ON RU.ID = POL.CREATE_UID\n     JOIN LANDING.ODOO.POS_PAYMENT PP ON PP.POS_ORDER_ID = POL.ORDER_ID\n     JOIN LANDING.ODOO.POS_PAYMENT_METHOD PPM ON PPM.ID = PP.PAYMENT_METHOD_ID;\n\n    UPDATE STAGING.ODOO.SALES\n    SET \n        DUKA_NAME =  SHOP_INFO.DUKA_NAME,\n        SHOP_KEEPER = SHOP_INFO.SHOP_KEEPER,\n        CUSTOMER_ID = SHOP_INFO.PARTNER_ID\n    FROM (\n           SELECT POL.ID,RS.NAME AS DUKA_NAME, PO.PARTNER_ID, STAGING.ODOO.GET_NAME(RU.LOGIN) AS SHOP_KEEPER\n            FROM LANDING.ODOO.POS_ORDER_LINE POL\n            JOIN LANDING.ODOO.POS_ORDER PO ON PO.ID = POL.ORDER_ID\n            JOIN LANDING.ODOO.RES_SHOP RS ON PO.SHOP_ID = RS.ID\n            JOIN LANDING.ODOO.RES_USERS RU ON RU.ID = PO.USER_ID\n    )SHOP_INFO\n    WHERE SALES.POS_ORDER_LINE_ID = SHOP_INFO.ID;\n\n    UPDATE STAGING.ODOO.SALES \n    SET\n        PRICE = CASE \n            WHEN PRICE_INFO.COMPUTE_PRICE = 'percent' THEN PRICE_INFO.PERCENT_PRICE\n            WHEN PRICE_INFO.COMPUTE_PRICE = 'fixed' THEN PRICE_INFO.FIXED_PRICE\n            ELSE SALES.PRICE END,\n        PRICE_LIST_ID = CASE \n            WHEN PRICE_INFO.PRICELIST_ID IS NULL THEN 1   \n            ELSE PRICE_INFO.PRICELIST_ID END,\n        PRICE_LIST = CASE \n            WHEN PRICE_INFO.NAME IS NULL THEN 'Public Pricelist'\n            ELSE PRICE_INFO.NAME END\n    FROM(\n      SELECT PT.ID AS PRODUCT_ID,\n        PP.COMPANY_ID ,\n        PP.NAME,PPI.PRICELIST_ID, PPI.COMPUTE_PRICE, PPI.FIXED_PRICE, PPI.PERCENT_PRICE\n        FROM LANDING.ODOO.PRODUCT_PRICELIST_ITEM PPI\n        JOIN LANDING.ODOO.PRODUCT_PRICELIST PP ON PP.ID = PPI.PRICELIST_ID\n        RIGHT JOIN LANDING.ODOO.PRODUCT_TEMPLATE PT ON PPI.PRODUCT_TMPL_ID = PT.ID\n     ) PRICE_INFO\n\n    WHERE SALES.PRODUCT_ID = PRICE_INFO.PRODUCT_ID;\n\n    UPDATE STAGING.ODOO.SALES\n    SET \n        ID = DEV_INFO.ID,\n        DB_CREATED_AT = DEV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, DB_CREATED_AT, POS_ORDER_LINE_ID FROM SALES.ODOO_SALES\n    ) DEV_INFO\n    WHERE SALES.ID IS NULL AND SALES.POS_ORDER_LINE_ID = DEV_INFO.POS_ORDER_LINE_ID;\n    \n    UPDATE DEVELOPMENT.SALES.ODOO_SALES AS T\n    SET\n        T.COMPANY_ID = S.COMPANY_ID,\n        T.COUNTRY = S.COUNTRY,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.DUKA_NAME= S.DUKA_NAME,\n        T.MARGIN=  S.MARGIN,\n        T.CUSTOMER_ID =S.CUSTOMER_ID,\n        T.POS_ORDER_LINE_ID=  S.POS_ORDER_LINE_ID,\n        T.PRICE=  S.PRICE,\n        T.PRICE_LIST= S.PRICE_LIST,\n        T.PRICE_LIST_ID= S.PRICE_LIST_ID,\n        T.PRODUCT_CATEGORY = S.PRODUCT_CATEGORY,\n        T.PRODUCT_CATEGORY_ID=  S.PRODUCT_CATEGORY_ID,\n        T.PRODUCT_CODE=  S.PRODUCT_CODE,\n        T.PRODUCT_ID=  S.PRODUCT_ID,\n        T.PRODUCT_NAME =  S.PRODUCT_NAME,\n        T.QUANTITY=  S.QUANTITY,\n        T.SHOP_KEEPER= S.SHOP_KEEPER,\n        T.PAYMENT_METHOD_ID = S.PAYMENT_METHOD_ID,\n        T.PAYMENT_METHOD_NAME = S.PAYMENT_METHOD_NAME\n    FROM STAGING.ODOO.SALES S\n    WHERE T.ID  = S.ID \n    AND (\n      ZEROIFNULL(T.COMPANY_ID) != ZEROIFNULL(S.COMPANY_ID)\n     OR ZEROIFNULL(T.MARGIN) != ZEROIFNULL(S.MARGIN)\n     OR ZEROIFNULL(T.POS_ORDER_LINE_ID) != ZEROIFNULL(S.POS_ORDER_LINE_ID)\n     OR ZEROIFNULL(T.PRICE) != ZEROIFNULL(S.PRICE)\n     OR ZEROIFNULL(T.PRICE_LIST_ID) != ZEROIFNULL(S.PRICE_LIST_ID)\n     OR ZEROIFNULL(T.CUSTOMER_ID) != ZEROIFNULL(S.CUSTOMER_ID)\n     OR ZEROIFNULL(T.PRODUCT_CATEGORY_ID) != ZEROIFNULL(S.PRODUCT_CATEGORY_ID)\n     OR ZEROIFNULL(T.PRODUCT_ID) != ZEROIFNULL(S.PRODUCT_ID)\n     OR ZEROIFNULL(T.QUANTITY) != ZEROIFNULL(S.QUANTITY)\n     OR IFNULL(T.COUNTRY,'') != IFNULL(S.COUNTRY,'')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.DUKA_NAME,'') != IFNULL(S.DUKA_NAME,'')\n     OR IFNULL(T.PRICE_LIST,'') != IFNULL(S.PRICE_LIST,'')\n     OR IFNULL(T.PRODUCT_CATEGORY,'') != IFNULL(S.PRODUCT_CATEGORY,'')\n     OR IFNULL(T.PRODUCT_CODE,'') != IFNULL(S.PRODUCT_CODE,'')\n     OR IFNULL(T.PRODUCT_NAME,'') != IFNULL(S.PRODUCT_NAME,'')\n     OR IFNULL(T.SHOP_KEEPER,'') != IFNULL(S.SHOP_KEEPER,'')\n     OR IFNULL(T.PAYMENT_METHOD_NAME, '') != IFNULL(S.PAYMENT_METHOD_NAME,'')\n     OR IFNULL(T.PAYMENT_METHOD_ID,NULL) != IFNULL(S.PAYMENT_METHOD_ID, NULL)\n    );\n    UPDATE_COUNT := :SQLROWCOUNT;\n\n    INSERT INTO DEVELOPMENT.SALES.ODOO_SALES(\n        ID, COMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,CUSTOMER_ID,\n        DUKA_NAME,MARGIN,POS_ORDER_LINE_ID,PRICE,PRICE_LIST,PRICE_LIST_ID,PRODUCT_CATEGORY,\n        PRODUCT_CATEGORY_ID,PRODUCT_CODE,PRODUCT_ID,PRODUCT_NAME,QUANTITY,SHOP_KEEPER, PAYMENT_METHOD_NAME, PAYMENT_METHOD_ID)\n    SELECT IFNULL((SELECT MAX(ID) FROM DEVELOPMENT.SALES.ODOO_SALES),0) +ROW_NUMBER() OVER (ORDER BY S.ID),\n        S.COMPANY_ID,S.COUNTRY,S.CREATED_AT, S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.CUSTOMER_ID,\nS.DUKA_NAME,S.MARGIN,S.POS_ORDER_LINE_ID,S.PRICE,S.PRICE_LIST,S.PRICE_LIST_ID,S.PRODUCT_CATEGORY,S.PRODUCT_CATEGORY_ID,S.PRODUCT_CODE,S.PRODUCT_ID,S.PRODUCT_NAME,S.QUANTITY,S.SHOP_KEEPER, S.PAYMENT_METHOD_NAME, S.PAYMENT_METHOD_ID\nFROM STAGING.ODOO.SALES AS S\nWHERE S.ID = null OR S.ID NOT IN ( SELECT ID FROM DEVELOPMENT.SALES.ODOO_SALES);\nINSERT_COUNT := :SQLROWCOUNT;\n    \n    /* Another Update is done here to ensure that for the first run the staging has ID and the next update block (is_delete) does not give false positives*/\n    \n    UPDATE STAGING.ODOO.SALES\n    SET \n        ID = DEV_INFO.ID,\n        DB_CREATED_AT = DEV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, DB_CREATED_AT, POS_ORDER_LINE_ID FROM SALES.ODOO_SALES\n    ) DEV_INFO\n    WHERE SALES.ID IS NULL AND SALES.POS_ORDER_LINE_ID = DEV_INFO.POS_ORDER_LINE_ID;\n    \n    UPDATE SALES.ODOO_SALES AS TRG\n    SET IS_DELETED = true\n    FROM(\n     SELECT T.ID FROM STAGING.ODOO.SALES AS S\n     RIGHT JOIN SALES.ODOO_SALES AS T \n     ON S.ID = T.ID\n     WHERE S.ID IS NULL\n    ) AS SRC\n    WHERE TRG.ID = SRC.ID AND TRG.IS_DELETED != TRUE;;\n    DELETE_COUNT := :SQLROWCOUNT;\n    SELECT SYSTEM$STREAM_HAS_DATA('DEVELOPMENT.SALES.ODOO_SALES_STREAM') INTO :HAS_STREAM;\n    IF(:INSERT_COUNT = 0 AND :UPDATE_COUNT = 0 AND :DELETE_COUNT = 0 AND HAS_STREAM = TRUE) \n    THEN\n        CREATE TEMPORARY TABLE TEMP_SALES_STREAM AS (SELECT * FROM DEVELOPMENT.SALES.ODOO_SALES_STREAM);\n    END IF;\n    \n    RETURN_VAL := :INSERT_COUNT::varchar || ';' ||:UPDATE_COUNT::VARCHAR || ';' || :DELETE_COUNT::varchar;\n    CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\nEND;\n\n\nCREATE OR REPLACE PROCEDURE DEVELOPMENT.CLIENT.SP_INCREMENTLOAD_ODOO_CUSTOMERS()\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS \nDECLARE UPDATE_COUNT INTEGER DEFAULT 0; INSERT_COUNT INTEGER DEFAULT 0; DELETE_COUNT INTEGER DEFAULT 0; HAS_STREAM BOOLEAN; RETURN_VAL VARCHAR;\nBEGIN\n    TRUNCATE TABLE STAGING.ODOO.CUSTOMERS;\n    INSERT INTO STAGING.ODOO.CUSTOMERS(\n        USER_ID,NAME, PHONE_NUMBER,COMPANY_ID,COUNTRY,CREATED_AT,CREATED_BY,DB_UPDATED_AT\n    )\n    SELECT RP.ID,RP.NAME,RP.PHONE_SANITIZED, RP.COMPANY_ID,RC.NAME,RP.CREATE_DATE,\n        STAGING.ODOO.GET_NAME(RU.LOGIN),current_timestamp()\n    FROM LANDING.ODOO.RES_PARTNER RP\n    JOIN LANDING.ODOO.RES_COMPANY RC ON RP.COMPANY_ID = RC.ID\n    JOIN LANDING.ODOO.RES_USERS RU ON RU.ID = RP.CREATE_UID\n    WHERE RP.CUSTOMER = TRUE;\n\n    UPDATE STAGING.ODOO.CUSTOMERS \n    SET\n    COMPANY_ID = CASE WHEN STAGING.ODOO.CUSTOMERS.COMPANY_ID IS NULL THEN USERS.COMPANY_ID ELSE STAGING.ODOO.CUSTOMERS.COMPANY_ID END,\n    COUNTRY = CASE WHEN STAGING.ODOO.CUSTOMERS .COUNTRY IS NULL THEN USERS.COUNTRY ELSE STAGING.ODOO.CUSTOMERS .COUNTRY END\n    FROM (\n    SELECT RP.ID, RC.ID AS COMPANY_ID, RC.NAME AS COUNTRY \n     FROM LANDING.ODOO.RES_PARTNER RP\n    JOIN LANDING.ODOO.RES_COUNTRY RCR ON RP.COUNTRY_ID = RCR.ID\n    JOIN LANDING.ODOO.RES_COMPANY RC ON RC.NAME = RCR.NAME\n    ) USERS\n    WHERE STAGING.ODOO.CUSTOMERS.USER_ID = USERS.ID;\n    \n    UPDATE STAGING.ODOO.CUSTOMERS \n    SET \n        ID = CUST_INFO.ID,\n        DB_CREATED_AT = CUST_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, USER_ID, DB_CREATED_AT FROM CLIENT.ODOO_CUSTOMERS\n    ) CUST_INFO\n    WHERE STAGING.ODOO.CUSTOMERS.ID IS NULL AND STAGING.ODOO.CUSTOMERS.USER_ID = CUST_INFO.USER_ID;\n    \n    UPDATE CLIENT.ODOO_CUSTOMERS AS T\n    SET\n        T.COMPANY_ID=S.COMPANY_ID,\n        T.COUNTRY= S.COUNTRY,\n        T.PHONE_NUMBER = S.PHONE_NUMBER,\n        T.CREATED_AT= S.CREATED_AT,\n        T.CREATED_BY= S.CREATED_BY,\n        T.DB_UPDATED_AT= S.DB_UPDATED_AT,\n        T.NAME = S.NAME,\n        T.USER_ID = S.USER_ID\n    FROM STAGING.ODOO.CUSTOMERS S\n    WHERE T.ID  = S.ID \n    AND (\n    IFNULL(T.COMPANY_ID, NULL) != IFNULL(S.COMPANY_ID,NULL)\n     OR IFNULL(T.COUNTRY,'''') != IFNULL(S.COUNTRY,'''')\n     OR IFNULL(T.PHONE_NUMBER,'''') != IFNULL(S.PHONE_NUMBER,'''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.NAME,'''') != IFNULL(S.NAME,'''')\n     OR IFNULL(T.USER_ID,NULL) != IFNULL(S.USER_ID,NULL));\n     \n    UPDATE_COUNT := :SQLROWCOUNT;\n    \n    INSERT INTO CLIENT.ODOO_CUSTOMERS (\n        ID,COMPANY_ID,COUNTRY,CREATED_AT, CREATED_BY,DB_CREATED_AT,DB_UPDATED_AT,NAME,USER_ID, PHONE_NUMBER)\n       SELECT IFNULL((SELECT MAX(ID) FROM DEVELOPMENT.CLIENT.ODOO_CUSTOMERS),0) +ROW_NUMBER() OVER (ORDER BY S.ID),S.COMPANY_ID,S.COUNTRY,S.CREATED_AT, S.CREATED_BY,S.DB_CREATED_AT,S.DB_UPDATED_AT,S.NAME, S.USER_ID, PHONE_NUMBER\n       FROM STAGING.ODOO.CUSTOMERS S\n       WHERE S.ID = null OR S.ID NOT IN ( SELECT ID FROM DEVELOPMENT.CLIENT.ODOO_CUSTOMERS);\n    INSERT_COUNT := :SQLROWCOUNT;\n    \n    /* Another Update is done here to ensure that for the first run the staging has ID and the next update block (is_delete) does not give false positives*/\n    UPDATE STAGING.ODOO.CUSTOMERS \n    SET \n        ID = CUST_INFO.ID,\n        DB_CREATED_AT = CUST_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, USER_ID, DB_CREATED_AT FROM CLIENT.ODOO_CUSTOMERS\n    ) CUST_INFO\n    WHERE STAGING.ODOO.CUSTOMERS.ID IS NULL AND STAGING.ODOO.CUSTOMERS.USER_ID = CUST_INFO.USER_ID;\n    \n    UPDATE CLIENT.ODOO_CUSTOMERS AS TRG\n    SET IS_DELETED = true\n    FROM(\n     SELECT T.ID FROM STAGING.ODOO.CUSTOMERS AS S\n     RIGHT JOIN CLIENT.ODOO_CUSTOMERS AS T \n     ON S.ID = T.ID\n     WHERE S.ID IS NULL\n    ) AS SRC\n    WHERE TRG.ID = SRC.ID AND TRG.IS_DELETED != TRUE;;\n    DELETE_COUNT := :SQLROWCOUNT;\n    SELECT SYSTEM$STREAM_HAS_DATA('DEVELOPMENT.CLIENT.ODOO_CUSTOMERS_STREAM') INTO :HAS_STREAM;\n    IF(:INSERT_COUNT = 0 AND :UPDATE_COUNT= 0 AND :DELETE_COUNT = 0 AND HAS_STREAM = TRUE) \n    THEN\n        CREATE TEMPORARY TABLE TEMP_CUSTOMERS_STREAM AS (SELECT * FROM DEVELOPMENT.CLIENT.ODOO_CUSTOMERS_STREAM);\n    END IF;\n    RETURN_VAL := :INSERT_COUNT::varchar || ';' ||:UPDATE_COUNT::VARCHAR || ';' || :DELETE_COUNT::varchar;\n    CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\n    END;\n    \nCREATE OR REPLACE PROCEDURE DEVELOPMENT.LOGISTICS.SP_INCREMENTLOAD_ODOO_INVENTORY()\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS \nDECLARE UPDATE_COUNT INTEGER DEFAULT 0; INSERT_COUNT INTEGER DEFAULT 0; DELETE_COUNT INTEGER DEFAULT 0; RETURN_VAL VARCHAR; \nHAS_STREAM BOOLEAN;\nBEGIN\nTRUNCATE TABLE STAGING.ODOO.INVENTORY;\nINSERT INTO STAGING.ODOO.INVENTORY(\n    STOCK_QUANT_ID, LOCATION_ID, LOCATION_NAME, PRODUCT_ID, PRODUCT_NAME, \n    QUANTITY, AVAILABLE_QUANTITY, COMPANY_ID, COUNTRY, CREATED_AT, CREATED_BY\n)\nSELECT \n    SQ.ID, SQ.LOCATION_ID,SL.COMPLETE_NAME, SQ.PRODUCT_ID,PT.NAME, SQ.QUANTITY, SQ.QUANTITY - SQ.RESERVED_QUANTITY, SQ.COMPANY_ID, \n    RC.NAME,SQ.CREATE_DATE, STAGING.ODOO.GET_NAME(RU.LOGIN)  \nFROM LANDING.ODOO.STOCK_QUANT SQ\nJOIN LANDING.ODOO.STOCK_LOCATION SL ON SL.ID = SQ.LOCATION_ID\nJOIN LANDING.ODOO.PRODUCT_TEMPLATE PT ON PT.ID = SQ.PRODUCT_ID\nJOIN LANDING.ODOO.RES_COMPANY RC ON RC.ID = SQ.COMPANY_ID\nJOIN LANDING.ODOO.RES_USERS RU ON RU.ID = SQ.CREATE_UID;\n\nUPDATE STAGING.ODOO.INVENTORY\nSET\nVALUE =  VALUATION.UNIT_COST * QUANTITY\nFROM \n( \n SELECT DISTINCT SV.UNIT_COST,SV.PRODUCT_ID, SV.COMPANY_ID, SV.CREATE_DATE , RANK() OVER (\n    PARTITION BY SV.PRODUCT_ID, SV.COMPANY_ID ORDER BY SV.CREATE_DATE DESC) AS RANK_VAL\n FROM LANDING.ODOO.STOCK_QUANT SQ \n JOIN LANDING.ODOO.STOCK_VALUATION_LAYER SV\n ON SV.COMPANY_ID = SQ.COMPANY_ID AND SV.PRODUCT_ID = SQ.PRODUCT_ID\n WHERE SV.UNIT_COST IS NOT NULL\n    \n) VALUATION\nWHERE STAGING.ODOO.INVENTORY.PRODUCT_ID = VALUATION.PRODUCT_ID \nAND STAGING.ODOO.INVENTORY.COMPANY_ID = VALUATION.COMPANY_ID\nAND VALUATION.RANK_VAL = 1;\n\nUPDATE STAGING.ODOO.INVENTORY\n    SET \n        ID = INV_INFO.ID,\n        DB_CREATED_AT = INV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, STOCK_QUANT_ID, DB_CREATED_AT FROM LOGISTICS.ODOO_INVENTORY\n    ) INV_INFO\n    WHERE STAGING.ODOO.INVENTORY.ID IS NULL AND STAGING.ODOO.INVENTORY.STOCK_QUANT_ID = INV_INFO.STOCK_QUANT_ID;\n    \nUPDATE LOGISTICS.ODOO_INVENTORY AS T\nSET  \n      T.COMPANY_ID = S.COMPANY_ID,\n      T.COUNTRY = S.COUNTRY,\n      T.CREATED_AT = S.CREATED_AT,\n      T.CREATED_BY = S.CREATED_BY,\n      T.DB_UPDATED_AT = S.DB_UPDATED_AT,\n      T.STOCK_QUANT_ID = S.STOCK_QUANT_ID,\n      T.LOCATION_ID  = S.LOCATION_ID,\n      T.LOCATION_NAME = S.LOCATION_NAME,\n      T.PRODUCT_ID = S.PRODUCT_ID,\n      T.PRODUCT_NAME = S.PRODUCT_NAME,\n      T.QUANTITY = S.QUANTITY,\n      T.AVAILABLE_QUANTITY = S.AVAILABLE_QUANTITY,\n      T.VALUE = S.VALUE\nFROM STAGING.ODOO.INVENTORY S\n    WHERE T.ID  = S.ID \n    AND (\n     IFNULL(T.COMPANY_ID, NULL) != IFNULL(S.COMPANY_ID,NULL)\n     OR IFNULL(T.COUNTRY,'''') != IFNULL(S.COUNTRY,'''')\n     OR IFNULL(T.CREATED_AT,NULL) != IFNULL(S.CREATED_AT,NULL)\n     OR IFNULL(T.CREATED_BY,NULL) != IFNULL(S.CREATED_BY,NULL)\n     OR IFNULL(T.STOCK_QUANT_ID,NULL) != IFNULL(S.STOCK_QUANT_ID,NULL)\n     OR IFNULL(T.LOCATION_ID,NULL) != IFNULL(S.LOCATION_ID,NULL)\n     OR IFNULL(T.LOCATION_NAME,'''') != IFNULL(S.LOCATION_NAME,'''')\n     OR IFNULL(T.PRODUCT_ID,NULL) != IFNULL(S.PRODUCT_ID,NULL)\n     OR IFNULL(T.PRODUCT_NAME,'''') != IFNULL(S.PRODUCT_NAME,'''')\n     OR IFNULL(T.QUANTITY,NULL) != IFNULL(S.QUANTITY,NULL)\n     OR IFNULL(T.AVAILABLE_QUANTITY,NULL) != IFNULL(S.AVAILABLE_QUANTITY,NULL)\n     OR IFNULL(T.VALUE,NULL) != IFNULL(S.VALUE,NULL));\n     \n    UPDATE_COUNT := :SQLROWCOUNT;\n\n    INSERT INTO LOGISTICS.ODOO_INVENTORY (\n        ID, STOCK_QUANT_ID, LOCATION_ID, LOCATION_NAME, PRODUCT_ID, PRODUCT_NAME, QUANTITY, \n        COMPANY_ID, COUNTRY, CREATED_AT, CREATED_BY, AVAILABLE_QUANTITY,VALUE )\n    SELECT \n      IFNULL((SELECT MAX(ID) FROM DEVELOPMENT.LOGISTICS.ODOO_INVENTORY),0) +ROW_NUMBER() OVER (ORDER BY S.ID),\n    S.STOCK_QUANT_ID, S.LOCATION_ID, S.LOCATION_NAME, S.PRODUCT_ID, S.PRODUCT_NAME, S.QUANTITY, S.COMPANY_ID, S.COUNTRY, S.CREATED_AT, S.CREATED_BY, S.AVAILABLE_QUANTITY, S.VALUE \n    FROM STAGING.ODOO.INVENTORY S\n    WHERE S.ID = null OR S.ID NOT IN ( SELECT ID FROM DEVELOPMENT.LOGISTICS.ODOO_INVENTORY);\n    \n     INSERT_COUNT := :SQLROWCOUNT;\n    \n    /* Another Update is done here to ensure that for the first run the staging has ID and the next update block (is_delete) does not give false positives*/\n     \n     UPDATE STAGING.ODOO.INVENTORY\n    SET \n        ID = INV_INFO.ID,\n        DB_CREATED_AT = INV_INFO.DB_CREATED_AT\n    FROM(\n        SELECT ID, STOCK_QUANT_ID, DB_CREATED_AT FROM LOGISTICS.ODOO_INVENTORY\n    ) INV_INFO\n    WHERE STAGING.ODOO.INVENTORY.ID IS NULL AND STAGING.ODOO.INVENTORY.STOCK_QUANT_ID = INV_INFO.STOCK_QUANT_ID;\n    \n    UPDATE LOGISTICS.ODOO_INVENTORY AS TRG\n    SET IS_DELETED = true\n    FROM(\n     SELECT T.ID FROM STAGING.ODOO.INVENTORY AS S\n     RIGHT JOIN LOGISTICS.ODOO_INVENTORY AS T \n     ON S.ID = T.ID\n     WHERE S.ID IS NULL\n    ) AS SRC\n    WHERE TRG.ID = SRC.ID AND TRG.IS_DELETED != TRUE;\n    DELETE_COUNT := :SQLROWCOUNT;\n    SELECT SYSTEM$STREAM_HAS_DATA('DEVELOPMENT.LOGISTICS.ODOO_INVENTORY_STREAM') INTO :HAS_STREAM;\n    IF(:INSERT_COUNT = 0 AND :UPDATE_COUNT= 0 AND :DELETE_COUNT = 0 AND HAS_STREAM = TRUE) \n    THEN\n        CREATE TEMPORARY TABLE TEMP_CUSTOMERS_STREAM AS (SELECT * FROM DEVELOPMENT.LOGISTICS.ODOO_INVENTORY_STREAM);\n    END IF;\n    RETURN_VAL := :INSERT_COUNT::varchar || ';' ||:UPDATE_COUNT::VARCHAR || ';' || :DELETE_COUNT::varchar;\n    CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\nEND;\n\n\nCREATE OR REPLACE PROCEDURE DEVELOPMENT.CLIENT.SP_INCREMENTLOAD_KOBO_KENYA_FARMER_ENROLLMENT_LR23()\nRETURNS VARCHAR(16777216)\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDECLARE UPDATE_COUNT INTEGER DEFAULT 0; INSERT_COUNT INTEGER DEFAULT 0; HAS_STREAM BOOLEAN; DELETE_COUNT INTEGER DEFAULT 0;RETURN_VAL VARCHAR;\nBEGIN\nBEGIN TRANSACTION;\nUPDATE DEVELOPMENT.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS  T\nSET \n    T.SUBMISSION_ID = S.SUBMISSION_ID,\n    T.REGION = S.REGION,\n    T.NURSERY = S.NURSERY,\n    T.DUKA = S.DUKA,\n    T.USERNAME = S.USERNAME,\n    T.SITE = S.SITE,\n    T.OTHER_SITE = S.OTHER_SITE,\n    T.FARMER_NAME = S.FARMER_NAME,\n    T.FARMER_ID = S.FARMER_ID ,\n    T.FARMER_PHONE_NUMBER = S.FARMER_PHONE_NUMBER,\n    T.TUPANDE_FARMER = S.TUPANDE_FARMER,\n    T.START_TIME= S.START_TIME,\n    T.END_TIME = S.END_TIME,\n    T.SUBMISSION_TIME = S.SUBMISSION_TIME,\n    T.SUBMITTED_BY = S.SUBMITTED_BY,\n    T.YEAR = S.YEAR,\n    T.SEASON = S.SEASON,\n    T.DB_UPDATED_AT =S.DB_UPDATED_AT,\n    T.COUNTRY = S.COUNTRY\nFROM STAGING.KOBO.KENYA_FARMERS_ENROLLMENT_LR23_STREAM S\nWHERE T.KOBO_ID = S.ID\nAND S.METADATA$ACTION='INSERT' \nAND S.METADATA$ISUPDATE='TRUE';\nUPDATE_COUNT := :SQLROWCOUNT;\n\nINSERT INTO DEVELOPMENT.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS(\n        ID, KOBO_ID, SUBMISSION_ID, REGION, NURSERY, DUKA, USERNAME, SITE, OTHER_SITE, FARMER_NAME, FARMER_ID, \n        FARMER_PHONE_NUMBER, TUPANDE_FARMER,YEAR, SEASON, COUNTRY, START_TIME,END_TIME, SUBMISSION_TIME, \n        SUBMITTED_BY, IS_DELETED\n    )\n    SELECT\n        IFNULL((SELECT MAX(ID) FROM DEVELOPMENT.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS),0) +ROW_NUMBER() OVER (ORDER BY S.ID), \n        S.ID, S.SUBMISSION_ID, S.REGION, S.NURSERY, S.DUKA, S.USERNAME, S.SITE, S.OTHER_SITE, S.FARMER_NAME,\n        S.FARMER_ID, S.FARMER_PHONE_NUMBER,\n        S.TUPANDE_FARMER,S.YEAR, S.SEASON, S.COUNTRY, S.START_TIME,S.END_TIME, S.SUBMISSION_TIME, \n        S.SUBMITTED_BY,S.IS_DELETED\n    FROM STAGING.KOBO.KENYA_FARMERS_ENROLLMENT_LR23_STREAM S\n    WHERE S.ID NOT IN ( SELECT KOBO_ID FROM DEVELOPMENT.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS)\n    AND S.METADATA$ACTION='INSERT' \n    AND S.METADATA$ISUPDATE='FALSE';\nINSERT_COUNT := :SQLROWCOUNT;\n\nUPDATE DEVELOPMENT.CLIENT.KOBO_SEASONAL_CLIENTS_ENROLLMENTS  T\nSET \nT.IS_DELETED =  TRUE,\nT.DB_UPDATED_AT = current_timestamp()\nFROM STAGING.KOBO.KENYA_FARMERS_ENROLLMENT_LR23_STREAM S\nWHERE T.KOBO_ID = S.ID \nAND T.IS_DELETED != TRUE\nAND S.METADATA$ACTION='DELETE' \nAND S.METADATA$ISUPDATE='TRUE';\nDELETE_COUNT := :SQLROWCOUNT;\n\nCOMMIT;\n    RETURN_VAL := :INSERT_COUNT::varchar || ';' ||:UPDATE_COUNT::VARCHAR || ';' || :DELETE_COUNT::varchar;\n    CALL SYSTEM$SET_RETURN_VALUE(:RETURN_VAL);\nEND;\n\n\n-- DROP TABLE IF EXISTS #staging_DimGIS\n-- DROP TABLE IF EXISTS #unique_staging_DimGIS\n\n-- CREATE TABLE #staging_DimGIS(\n-- GISID int null,\n-- KoboId int null,\n-- Region varchar(255) null,\n-- District varchar(255) null,\n-- SiteID int null,\n-- Site varchar(255) null,\n-- SiteBoundaries varchar(500) null,\n-- SitePolygon varchar (500) null,\n-- SiteGeography geometry null,\n-- SiteAreaByFo varchar(255) null,\n-- CreatedAt datetime null,\n-- CreatedBy varchar(100) null,\n-- UploadSource varchar(100) null,\n-- LastUpdatedAt datetime null,\n-- LastUpdateSource varchar (100) null,\n-- IsDeleted bit\n-- ) ON [PRIMARY]\n\n\n\n\n\n\n-- CREATE OR REPLACE PROCEDURE DEVELOPMENT.GEOGRAPHY.SP_INCREMENTLOAD_KOBO_SITEGIS();\n-- AS\n-- BEGIN\n\n-- DECLARE FORMATTED_BOUNDARIES Varchar(Max),  POLYGON Varchar(max)\n\nTRUNCATE TABLE STAGING.KOBO.KENYA_SITEGIS;\n\nINSERT INTO STAGING.KOBO.KENYA_SITEGIS\n(KoboID, Region, District, Location, SiteBoundaries,SiteAreaByFo, STARTTIME, ENDTIME, SUBMISSIONTIME, SUBMITTEDBY, USERNAME)\nSELECT Distinct ID, Region, District, REPLACE(LOCATION,District, ''), SiteBoundaries, SiteAreaByFo, STARTTIME, ENDTIME, SUBMISSIONTIME, SUBMITTEDBY, USERNAME from LANDING.KOBO.KENYA_HOUSEHOLD_SITE S where S.SiteBoundaries is not null;\n\nUPDATE STAGING.KOBO.KENYA_SITEGIS.\nset SiteID = Site.SiteId,\n@formattedBoundaries = dbo.standard_geo_point(siteboundaries),\n@polygon =  ISNULL(SitePolygon, CONCAT('POLYGON((' ,@formattedBoundaries, SUBSTRING(@formattedBoundaries, 0, CharIndex(',',@formattedBoundaries )), '))')),\n\nSitePolygon = CASE \n\tWHEN ISNULL(SiteBoundaries  ,'') != ''\n\tTHEN @polygon \n\tWHEN ISNULL(SitePolygon  ,'') != ''\n\tThen SitePolygon\n\tELSE NULL END, \nSiteGeography = CASE \n\tWHEN ISNULL(SIteBoundaries  ,'') != ''\n\tTHEN  geometry::STGeomFromText(@polygon, 4326)\n\tWHEN ISNULL(SitePolygon  ,'') != ''\n\tThen geometry::STGeomFromText(SitePolygon, 4326)\nELSE NULL END\nFROM(\n   SELECT DISTINCT S.Sitename,  S.SiteId,  S.DistrictName, S.RegionName FROM dbo.DimSite S\n) Site\nWHERE Site.DistrictName  = #staging_DimGIS.District\nAND  Site.SiteName  = #staging_DimGIS.Site\nAND #staging_DimGIS.SiteId IS NULL\n\n\nSELECT * into #unique_staging_DimGis  FROM \n\n(\n  SELECT *, RANK() OVER  (PARTITION BY SiteId ORDER BY LastUpdatedAt DESC) AS Rank from #staging_DimGIs\n) Site\nWHERE Site.Rank = 1\n\nUPDATE #unique_staging_DimGIS\n\tSET GISID = GIS.GISID\nFROM (\n\tSELECT distinct GISID, KoboId, SiteId\n\tfrom OAF_SHARED_DIMENSIONS.dbo.DimSiteGIS\n) GIS\nWhere GIS.KoboId=#unique_staging_DimGIS.KoboId\nand Gis.SiteId = #unique_staging_DimGis.SiteId\nand #unique_staging_DimGIS.GISID is null\n\n\t\nMERGE OAF_SHARED_DIMENSIONS.dbo.DimSiteGIS AS T\nUSING #unique_staging_DimGIS AS S\nON T.GISID = S.GISID\nWHEN MATCHED AND \n(  \n   ISNULL(T.KoboId ,'') != ISNULL ( S.KoboId,'')  \nOR ISNULL(T.SiteID ,'') != ISNULL ( S.SiteID,'')  \nOR ISNULL(T.Site ,'') != ISNULL ( S.Site,'') \nOR ISNULL(T.Region ,'') != ISNULL ( S.Region,'') \nOR ISNULL(T.District,'') != ISNULL ( S.District,'')  \nOR ISNULL(T.SiteAreaByFo ,'') != ISNULL ( S.SiteAreaByFo, '')\nOR ISNULL(T.SitePolygon ,'') != ISNULL ( S.SitePolygon,'')\nOR ISNULL(T.CreatedAt,'') != ISNULL ( S.CreatedAt, '')  \nOR ISNULL(T.CreatedBy,'') != ISNULL ( S.CreatedBy,'') \nOR ISNULL(T.LastUpdatedAt,'') != ISNULL ( S.LastUpdatedAt, '')  \nOR ISNULL(T.LastUpdateSource,'') != ISNULL ( S.LastUpdateSource,'') \nOR ISNULL(T.UploadSource,'') != ISNULL ( S.UploadSource, '')  \nOR ISNULL(T.IsDeleted,'') != ISNULL ( S.IsDeleted,'') \n\t \n)\nTHEN UPDATE SET\n\tT.KoboId = S.KoboId, \n\tT.SiteID = S.SiteID, \n\tT.Site = S.Site, \n\tT.SiteAreaByFo = S.SiteAreaByFo,\n\tT.SitePolygon = S.SitePolygon,\n\tT.SiteGeography =  geometry::STGeomFromText( S.SitePolygon,4326)\n \nWHEN NOT MATCHED BY Target THEN\n    INSERT (\n\t\t KoboId,\n\t\t SiteID, \n\t\t Site, \n\t\t Region, \n\t\t District,\n\t\t SiteGeography,\n\t\t SiteAreaByFo,\n\t\t SitePolygon,\n\t\t CreatedAt, \n\t\t CreatedBy,\n\t\t UploadSource, \n\t\t LastUpdatedAt,\n\t\t LastUpdateSource, \n\t\t IsDeleted\n)\n\tVALUES (\n\t\t S.KoboId,\n\t\t S.SiteID, \n\t\t S.Site, \n\t\t S.Region,\n\t\t S.District,\n\t\t S.SiteGeography,\n\t\t S.SiteAreaByFo,\n\t\t S.SitePolygon,\n\t\t S.CreatedAt,\n\t\t S.CreatedBy,\n\t\t S.UploadSource,\n\t\t S.LastUpdatedAt,\n\t\t S.LastUpdateSource,\n\t\t S.IsDeleted\n\t)\n; \nEND\n\n\nCREATE OR REPLACE PROCEDURE DEVELOPMENT.PUBLIC.SP_TRUNCATELOAD_LOAD_COMMCARE_2022()\nRETURNS VARCHAR\nLANGUAGE SQL\nEXECUTE AS CALLER\nAS\nDeclare table_path varchar;\ntable_nm varchar ;\nc1 CURSOR FOR SELECT TABLE_NAME AS NAME FROM  landing.information_schema.tables \nWHERE TABLE_SCHEMA = 'COMMCARE';\nBEGIN\n  FOR RECORD IN c1 DO\n    table_nm := RECORD.NAME;\n    IF (CONTAINS(:table_nm, 'FARMER')) THEN \n    table_path := 'DEVELOPMENT.CLIENT.COMMCARE_'||:table_nm;\n    ELSEIF (CONTAINS(:table_nm, 'MARKET'))THEN\n    table_path := 'DEVELOPMENT.SALES.COMMCARE_'||:table_nm;\n        ELSEIF (CONTAINS(:table_nm, 'ORDERING')) THEN\n     table_path := 'DEVELOPMENT.SALES.COMMCARE_'||:table_nm;\n    ELSEIF (CONTAINS(:table_nm, 'FIELD')) THEN\n     table_path := 'DEVELOPMENT.LOGISTICS.COMMCARE_'||:table_nm;\n    END IF;\n    let landing_path varchar := 'Landing.Commcare.'||:table_nm;\n    CREATE OR REPLACE TABLE identifier(:table_path) AS SELECT * FROM IDENTIFIER(:landing_path);\n  END FOR;\nEND;   \n\n\n\n\n",
  "Parameters": [],
  "Charts": [],
  "FileSystemSafeName": "Worksheet.oaf.CREATE PROCEDURES (DEVELOPMENT.2cYVs9DnNEC.json",
  "_CreatedWith": "Snowflake Snowsight Extensions",
  "_CreatedVersion": "2023.2.8.0",
  "AccountName": "oaf",
  "AccountFullName": "oaf.west-europe.azure",
  "AccountUrl": "https://oaf.west-europe.azure.snowflakecomputing.com",
  "OrganizationID": "320344210810",
  "Region": "west-europe.azure"
}