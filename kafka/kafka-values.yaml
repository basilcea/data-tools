apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: kafka-pool-a
  labels:
    strimzi.io/cluster: my-cluster-a
spec:
  replicas: 3
  roles:
    - broker
  storage:
    type: jbod
    volumes:
      - id: 0
        type: persistent-claim
        size: 10Gi
        deleteClaim: false
      - id: 1
        type: persistent-claim
        size: 10Gi
        deleteClaim: false
      
---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster-a
  annotations:
    strimzi.io/node-pools: enabled
    # To use kraft mode
    # strimzi.io/kraft: enabled
spec:
  kafka:
    version: 3.7.0
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9095
        type: internal
        tls: true
        authentication:
          type: tls

      - name: scram
        port: 9096
        type: internal
        tls: true
        authentication:
          type: scram-sha-512
      - name: oauth
        port: 9093
        type: internal
        tls: true
        authentication:
          type: oauth
          # enableMetrics: true
          validIssuerUri: https://keycloak/realms/kafka-authz
          # yamllint disable-line rule:line-length
          jwksEndpointUri: https://keycloak/realms/kafka-authz/protocol/openid-connect/certs
          userNameClaim: preferred_username
          maxSecondsWithoutReauthentication: 360
          tlsTrustedCertificates:
            - secretName: keycloak-crt
              certificate: ca.crt
      - name: external
        port: 9094
        type: nodeport
        tls: true
        authentication:
          type: oauth
          # enableMetrics: true
          validIssuerUri: https://keycloak/realms/kafka-authz
          # yamllint disable-line rule:line-length
          jwksEndpointUri: https://keycloak/realms/kafka-authz/protocol/openid-connect/certs
          userNameClaim: preferred_username
          maxSecondsWithoutReauthentication: 360
          tlsTrustedCertificates:
            - secretName: keycloak-crt
              certificate: ca.crt

    authorization:
      type: keycloak
      enableMetrics: true
      clientId: kafka
      # yamllint disable-line rule:line-length
      tokenEndpointUri: https://keycloak/realms/kafka-authz/protocol/openid-connect/token
      tlsTrustedCertificates:
        - secretName: keycloak-crt
          certificate: ca.crt
      delegateToKafkaAcls: true
      superUsers:
        - service-account-kafka
        - CN=my-scram-user
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: "3.7"
  
    # metricsConfig:
    #   type: jmxPrometheusExporter
    #   valueFrom:
    #     configMapKeyRef:
    #       name: kafka-metrics
    #       key: kafka-metrics-config.yml
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 10Gi
      deleteClaim: false
    # metricsConfig:
    #   type: jmxPrometheusExporter
    #   valueFrom:
    #     configMapKeyRef:
    #       name: kafka-metrics
    #       key: zookeeper-metrics-config.yml
  entityOperator:
    topicOperator: {}
    userOperator: {}
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"

---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: kafka-pool-b
  labels:
    strimzi.io/cluster: my-cluster-b
spec:
  replicas: 3
  roles:
    - broker
  storage:
    type: jbod
    volumes:
      - id: 0
        type: persistent-claim
        size: 10Gi
        deleteClaim: false
      - id: 1
        type: persistent-claim
        size: 10Gi
        deleteClaim: false


---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster-b
  annotations:
    strimzi.io/node-pools: enabled
spec:
  kafka:
    version: 3.7.0
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: oauth
          validIssuerUri: https://keycloak/realms/kafka-authz
          # yamllint disable-line rule:line-length
          jwksEndpointUri: https://keycloak/realms/kafka-authz/protocol/openid-connect/certs
          userNameClaim: preferred_username
          maxSecondsWithoutReauthentication: 3600
          tlsTrustedCertificates:
            - secretName: keycloak-crt
              certificate: ca.crt
    authorization:
      type: keycloak
      clientId: kafka
      # yamllint disable-line rule:line-length
      tokenEndpointUri: https://keycloak/realms/kafka-authz/protocol/openid-connect/token
      tlsTrustedCertificates:
        - secretName: keycloak-crt
          certificate: ca.crt
      delegateToKafkaAcls: true
      superUsers:
        - service-account-kafka
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: "3.7"
    # metricsConfig:
    #   type: jmxPrometheusExporter
    #   valueFrom:
    #     configMapKeyRef:
    #       name: kafka-metrics
    #       key: kafka-metrics-config.yml
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 10Gi
      deleteClaim: false
    # metricsConfig:
    #   type: jmxPrometheusExporter
    #   valueFrom:
    #     configMapKeyRef:
    #       name: kafka-metrics
    #       key: zookeeper-metrics-config.yml
  entityOperator:
    topicOperator: {}
    userOperator: {}
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
